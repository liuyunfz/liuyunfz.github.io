<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网盘转存-将文件转存到OneDrive</title>
    <link href="/tutorial/mover-onedrive.html"/>
    <url>/tutorial/mover-onedrive.html</url>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先你得有个OneDrive账号以及你需要转存的源网盘。根据官方文档的说明，mover仅支持<strong>其他网盘转存至OneDrive</strong>，不支持OneDrive转存至其他网盘。除此之外，Mover似乎已经被微软收购了，所以可以直接登录你的Microsoft账号，也不太需要担心安全问题。  </p><p>官方支持的网盘如下：<br>  <strong>File Shares , Amazon S3 , Azure Blob Storage , Box , Dropbox , Egnyte , Google Drive , Office 365 , OneDrive , SharePoint Online</strong></p><p>网站地址： <a href="https://app.mover.io/login" target="_blank" rel="noopener">https://app.mover.io/login</a>  </p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>因为我个人也有转存的需求（我的大多数资源都是GD资源群里转存来的，所以都在GD里，而国内因为众所周知的原因无法直接访问）所以就想把GD里的东西转存到OneDrive里（office的E5账号附带了5T的空间）。E5应该是人均都有的，所以这里也就不赘述了。  </p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>首先登录上我们的微软账户，可以直接登录Business账号。<img src="/img/mover/1.png" srcset="/img/loading.gif" alt=""><br><img src="/img/mover/2.png" srcset="/img/loading.gif" alt=""></p><h2 id="网盘连接"><a href="#网盘连接" class="headerlink" title="网盘连接"></a>网盘连接</h2><p><img src="/img/mover/3.png" srcset="/img/loading.gif" alt=""><br>这里我选择Google Drive (Single User)，好像就是普通用户的Google Drive目录。<br><img src="/img/mover/4.png" srcset="/img/loading.gif" alt=""><br>授权的时候记得还是要开启某种神秘力量的，因为需要调用Google的授权。<br><img src="/img/mover/5.png" srcset="/img/loading.gif" alt=""><br>选择完源与目录后就可以进行start copy了。不过因为我的资源都是转存到了团队Google Drive里了，所以我的个人账户里并没有文件。这边我用到是一个支持WebDave的app——Mixplore，我不知道网页版能不能直接进行操作，不过这个可以直接将团队盘里的文件复制到个人盘里。<br>这边也安利一下这个软件，支持的协议和网盘还是很多的。<br><img src="/img/mover/6.png" srcset="/img/loading.gif" alt=""><br><img src="/img/mover/6.jpg" srcset="/img/loading.gif" alt=""><br>具体步骤就是直接从团队盘里复制，然后退回到自己的盘目录，然后粘贴即可，一般等待一到两秒即可。<br><img src="/img/mover/2.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="开始转存"><a href="#开始转存" class="headerlink" title="开始转存"></a>开始转存</h2><p>然后回到我们的mover，刷新一下就可以看到网盘里的内容更新了，可以发现Google Drive个人盘里已经多了我们刚刚复制过去的了，然后选择好目录后就直接点击start copy即可。<br><img src="/img/mover/7.png" srcset="/img/loading.gif" alt=""><br>这个running的任务就是我们刚刚创建的了，因为我之前已经自己试过了，所以显示已经完成了一个任务。<br><img src="/img/mover/8.png" srcset="/img/loading.gif" alt=""><br>接下来静待几分钟即可。在这段时间内我们也可以关闭我们的网页，如果想要查看的话只需要登录mover后在migration manager里查看就行。<br>最后转存完成，总大小7.94G，耗时29min，虽然不算快，但是胜在不耗流量不需要常驻。<br><img src="/img/mover/9.png" srcset="/img/loading.gif" alt=""></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>总体来说mover是个不错的转存方式，不仅可以剩下流量时间，而且完全免费。唯一的缺憾就是他只能将其他文件转存到OneDrive里，而且不支持某度。</p>]]></content>
    
    
    
    <tags>
      
      <tag>OneDrive</tag>
      
      <tag>Google Drive</tag>
      
      <tag>网盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为微信公众号接入疫情数据查询</title>
    <link href="/tutorial/python-wechat-searchvirus.html"/>
    <url>/tutorial/python-wechat-searchvirus.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>话接上文的《利用Python爬取丁香园疫情数据》，本次将利用这个完成的api，对接微信，实现微信公众号疫情查询。如果未看过上一篇文章的，可以 <a href="https://blog.6yfz.cn/tutorial/python-spider-dxy.html">点我前往</a> 。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>本次利用了python微信公众号开发框架的一个模块——<a href="https://github.com/offu/WeRoBot" target="_blank" rel="noopener">werobot</a>，具体功能可以阅读<a href="https://werobot.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">官方文档</a>。<br>除此之外，我们还需要一台服务器（仅指出80或443端口），用作公众号的功能对接。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>为了文章内容与字数考虑，本文不从零开始描述如何进行公众号的基本对接和验证，直接开始到功能添加。</p><h2 id="判断公众号位置数据内容"><a href="#判断公众号位置数据内容" class="headerlink" title="判断公众号位置数据内容"></a>判断公众号位置数据内容</h2><p>为了判断用户位置，我们需要知道用户发送了的地图位置数据在后台显示的是什么，所以我们分别到前后端进行查看。</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>首先后端先写好调试的代码，为了方便观察，我们debug和return同时返回用户发送的location的数据内容。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/43.png" srcset="/img/loading.gif" alt="代码"><br>并且启动我们的端口监听<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/44.png" srcset="/img/loading.gif" alt="启动"></p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>然后我们去前端发送位置数据，看看返回了什么。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/46.jpg" srcset="/img/loading.gif" alt="前端"></p><h3 id="数据判断"><a href="#数据判断" class="headerlink" title="数据判断"></a>数据判断</h3><p>再去看看后端<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/45.png" srcset="/img/loading.gif" alt="后端"><br>可以看到，前端和后端都返还了一个经纬度数据，并且数据类型是tuple（可以自行用type()函数进行查询）。</p><h2 id="逆地理编码"><a href="#逆地理编码" class="headerlink" title="逆地理编码"></a>逆地理编码</h2><p>微信公众号的地图数据返回的是经纬度信息，但是我们上次实现的是利用地区的名字判断查询的疫情数据，所以我们需要用到<a href="http://lbsyun.baidu.com/" target="_blank" rel="noopener">百度开发平台</a>的逆地理编码，实现将左边地址转换为地区信息。即使是未认证的用户也有每日六千条的配额，并发50次/s，对于普通用户来说完全足够。<br>所以我们利用百度账号登录这个开发者平台，创建一个应用<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/46.png" srcset="/img/loading.gif" alt="注册应用"><br>具体步骤就不展示了，记得勾选逆地理编码就行。<br>然后我们查看官方的<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad" target="_blank" rel="noopener">逆地理编码调用文档</a><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/47.png" srcset="/img/loading.gif" alt="服务文档"><br>这边你们自己看看奥，既然都是程序员了，这点基础肯定有的，或者看我写的成品。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/48.png" srcset="/img/loading.gif" alt="api请求"><br>为了不必要的麻烦，我们先本地指定经纬度，并且分析下返回的数据。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/49.png" srcset="/img/loading.gif" alt="api返回数据"><br>可以发现是成功的，我们也知道返回json的具体内容，剩下的就是接入完善了。</p><h2 id="代码接入"><a href="#代码接入" class="headerlink" title="代码接入"></a>代码接入</h2><p>上面的api已经写完了，然后就是和上次的内容对接了。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/50.png" srcset="/img/loading.gif" alt="功能对接"></p><h1 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h1><p>我们再将写好的代码转到后端，然后运行。去前端试一试。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/50.jpg" srcset="/img/loading.gif" alt="功能测试"><br>大功告成！  </p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>本次主要的难点在于需要调用百度的地理逆编码，总体还是简单的，这样我们就为我们的公众号增添了一个疫情查询功能。  </p><p>但是这段代码仍然有缺陷：</p><ol><li>是上次遗留下来的问题，地区查询因为部分例如自治区或者街道等特殊名称，导致无法利用简单的[:-1]进行匹配</li><li>其实也和第一个差不多，我们利用的是名字暴力循环匹配查找，理想状态是直接通过经纬度获得疫情数据（应该能实现，但得另外想办法抓包了）</li></ol><p>以上是全部内容，如果有疑问或者不对，又或者是有更好的解决办法，都可以在下面留言或者通过其他方式联系我~</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
      <tag>微信公众号</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日记-2020年4月20日</title>
    <link href="/diary/20200420.html"/>
    <url>/diary/20200420.html</url>
    
    <content type="html"><![CDATA[<div class="note note-primary"><p><strong>2020.04.23： 已更新后续</strong></p></div>  <h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在是晚上的23点22分，本来我已经关闭了电脑，并且洗漱完打算上床，但因为一件事久久不能释怀。  </p><h1 id="事情经过"><a href="#事情经过" class="headerlink" title="事情经过"></a>事情经过</h1><p>这段不幸的经历发生在一个我刚认识了不到一周的来自酷安的群友。就在昨日，他还在和我们畅谈打算明日在阿里云买台学生机，然后把域名备案。然而今天一早，却收到了他的消息。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/38.png" srcset="/img/loading.gif" alt="img"><br>昨天还说要备案的，怎么今天突然说要博客路要暂时停止了？<br>随即而来的，是我一直有耳闻，但却从未真切感受到的事——DDOS<br>以下是聊天记录：<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/39.png" srcset="/img/loading.gif" alt="img"><br>以下是涉及到的图片<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/41.jpg" srcset="/img/loading.gif" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/40.jpg" srcset="/img/loading.gif" alt="img"><br>短短一个晚上，6T的流量，直接欠费4500元，这对任何一个个人博客都是一个难以承担的数目，而这个不幸的遭遇者，还仅仅是一个初中生。  </p><h1 id="感思"><a href="#感思" class="headerlink" title="感思"></a>感思</h1><p>我为他的遭遇感到不幸，但我却不能为他做点什么，因为在此之前我从未遇到过这类事情。我无话可说，只能劝他保持心态，以及写下这篇文章用来警醒你我。被DDOS也许只是一个随机的事件，但谁也不能保证它不会降临到自己的身上，我们只有在危机到来之前，做好准备。<br>截至现在23：40分，腾讯云官方客服的态度仍然是不对流量及费用进行退回，可能会报公安吧，但它没备案，也不知道能不能成功。<br>就先写到这吧，有后续我会继续在这篇文章更进，希望它能挺过这一劫。</p><h1 id="后续（更新于4-23"><a href="#后续（更新于4-23" class="headerlink" title="后续（更新于4.23)"></a>后续（更新于4.23)</h1><p>话接上文，这位群友因为受到DDOS攻击，巨额的流量与请求费用使得腾讯云欠款4000+元。最后和腾讯云客服协商说是因为这是真实流量，没有成功挽回金额，本打算报案，但估计当事人最后也不了了之了。  </p><p>今天已是4.23日，距离事情发生已经过去了约3日，这三天内我了解了很多。许多个人博客用户都在19日当晚到20日早晨受到了攻击，损失金额也在百元不等，虽然比不上上文这位上千的，但都是一笔不小的损失了。事后，我的博客也在第二日收到了十余次web应用攻击（刚在去报表的时候发现又受到了一次攻击）。可以看出这是一次用户集群密度比较大的范围攻击，所以还是要提醒广大站长做好安全工作，CDN也尽量使用带有防御识别的。  </p><p>谨以此文，时刻警醒我网络安全的重要性。</p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【issue 已解决】Valine网址指向的一个小坑</title>
    <link href="/issue/hexo-valine-issue.html"/>
    <url>/issue/hexo-valine-issue.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用hexo博客的，肯定有很多评论系统用的是valine吧，毕竟这个方便还漂亮。并且支持的也不错，国内可以直连。但是我却因为一个小问题困扰了我两三个月之久（主要因为也没啥人来我博客评论）所以就一直没想着去修。<br>直到今天，我去改了一下leancloud的休眠政策，就想着顺便修复一下这个bug。 </p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>正常的显示，邮件收发都没啥问题，但唯独在邮件通知时，查看评论原文的地址指向出现了错误，不仅如此，在后台管理的地址指向也同样出现了错误。<br>本来应该是：</p><div class="hljs"><pre><code class="hljs bash">http://blog.6yfz.cn/tutorial/python-spider-dxy.html</code></pre></div><p>但指向却变成了</p><div class="hljs"><pre><code class="hljs bash">http://blog.6yfz.cn//tutorial/python-spider-dxy.html</code></pre></div><p>虽然网页显示上不会出现404，依然是正确的地址，但是因为valine的评论识别靠的的地址，所以就会导致看不到那个指向的评论。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/35.png" srcset="/img/loading.gif" alt="正常地址的评论"><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/36.png" srcset="/img/loading.gif" alt="错误地址的评论"></p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><p>解决的方法其实很简单，出错原因是因为valine的SITE_URL环境变量错误设置导致的，他会默认在该变量后添加具体的深层地址，即</p><div class="hljs"><pre><code class="hljs bash">/tutorial/python-spider-dxy.html</code></pre></div><p>所以只需要将SITE_URL设置例如 <a href="http://blog.6yfz.cn">http://blog.6yfz.cn</a> 的，而不要 <a href="http://blog.6yfz.cn/">http://blog.6yfz.cn/</a> ，这也是我错误的原因<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/37.png" srcset="/img/loading.gif" alt="img"><br>到头来发现自己的错误真是觉得又气又笑😹</p>]]></content>
    
    
    <categories>
      
      <category>issue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>issue</tag>
      
      <tag>hexo</tag>
      
      <tag>valine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Python爬取丁香园疫情数据</title>
    <link href="/tutorial/python-spider-dxy.html"/>
    <url>/tutorial/python-spider-dxy.html</url>
    
    <content type="html"><![CDATA[<p>疫情到现在过去很久了，国内已经大体控制下来了。这次的目标是爬取利用python爬取疫情数据（基于丁香园的数据）<br>这期本来3.9就创建了的，但一直拖到今天4.13才完成，还是太懒😂😂 </p><h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><ol><li>python及常用模块</li><li>VS Code</li><li>浏览器<br>目标网址：<a href="https://ncov.dxy.cn/ncovh5/view/pneumonia?scene=2&clicktime=1579579384&enterid=1579579384&from=timeline&isappinstalled=0" target="_blank" rel="noopener">https://ncov.dxy.cn/ncovh5/view/pneumonia?scene=2&amp;clicktime=1579579384&amp;enterid=1579579384&amp;from=timeline&amp;isappinstalled=0</a>  <a id="more"></a> <h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="1-抓包"><a href="#1-抓包" class="headerlink" title="1.抓包"></a>1.抓包</h3>首先是抓包<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/28.png" srcset="/img/loading.gif" alt="img"><br>经过分析可以看出，该网页的数据不同于平常的一个框架+单独的json数据包，它是直接渲染好了给我们传过来的，所以要做的事情就比较简单了，只需要从html代码中提取出我们需要的数据。<h3 id="2-python代码编写"><a href="#2-python代码编写" class="headerlink" title="2.python代码编写"></a>2.python代码编写</h3>我们先实现获取html代码的代码，然后再尝试从中提取数据。<div class="hljs"><pre><code class="hljs python">response = requests.get(<span class="hljs-string">"https://ncov.dxy.cn/ncovh5/view/pneumonia?scene=2&amp;clicktime=1579579384&amp;enterid=1579579384&amp;from=timeline&amp;isappinstalled=0"</span>)response.encoding = <span class="hljs-string">"utf-8"</span>body = response.text</code></pre></div>这里指定了一下编码，是为了防止出现不必要的转码错误。  <h3 id="3-提取HTML中的代码"><a href="#3-提取HTML中的代码" class="headerlink" title="3.提取HTML中的代码"></a>3.提取HTML中的代码</h3>获取网页数据实现了，接下来我们分析一下数据的位置，以及该如何提取出来。<img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/29.png" srcset="/img/loading.gif" alt="img"><br>通过观察我们可以发现，它是利用一个script一个区域数据，分别对应的是全球地区，全国地区等，里面是一串类似是js代码，先不管，先把我们这次要的国内数据提代码取出来。<img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/30.png" srcset="/img/loading.gif" alt="img"><br>通过分析，国内的数据script对应的id值是“getAreaStat” 。因为是属于一个类里的，所以这里我用了xpath，代码如下：<div class="hljs"><pre><code class="hljs python">html = etree.HTML(body, etree.HTMLParser())gethtml = html.xpath(<span class="hljs-string">'//*[@id="getAreaStat"]/text()'</span>)</code></pre></div><h3 id="4-提取代码中的数据"><a href="#4-提取代码中的数据" class="headerlink" title="4.提取代码中的数据"></a>4.提取代码中的数据</h3>经过上面的步骤，我们已经实现了提取出了国内数据的js代码，但是很明显我们只需要数据，而我们利用python也不可能执行这串window.getAreaStat代码，所以我们尝试删去赋值等代码，直接提取数据，因为里面的数据刚好符合json格式。<br>要删除的头数据<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/31.png" srcset="/img/loading.gif" alt="img"><br>要删除的尾数据<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/32.png" srcset="/img/loading.gif" alt="img"><br>即<div class="hljs"><pre><code class="hljs python">gethtml[<span class="hljs-number">0</span>][<span class="hljs-number">28</span>:<span class="hljs-number">-12</span>]</code></pre></div>这里[0]是因为前面xpath查找的返回的是list，因为我们指定了id，所以应该只能找到一个，并且正好是我们想要的，然后用[28:-12]提取出完美的json格式的数据。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/33.png" srcset="/img/loading.gif" alt="img"> <h3 id="5-查找数据"><a href="#5-查找数据" class="headerlink" title="5.查找数据"></a>5.查找数据</h3>虽然每个省份都是一个很好的json数据，但是我们要取的是整个省份，所以我们将其转化为列表，然后利用迭代，查找到我们需要的城市。<div class="hljs"><pre><code class="hljs python">data=eval(gethtml[<span class="hljs-number">0</span>][<span class="hljs-number">28</span>:<span class="hljs-number">-12</span>])p_count=<span class="hljs-string">"0"</span>c_count=<span class="hljs-string">"0"</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:    <span class="hljs-keyword">if</span> str(i.get(<span class="hljs-string">"provinceName"</span>)) == province:        p_count=str(i.get(<span class="hljs-string">"confirmedCount"</span>))        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> i[<span class="hljs-string">"cities"</span>]:            <span class="hljs-keyword">if</span> str(c.get(<span class="hljs-string">"cityName"</span>)) == city[<span class="hljs-number">0</span>:<span class="hljs-number">-1</span>]:                c_count=c.get(<span class="hljs-string">"confirmedCount"</span>)                <span class="hljs-keyword">break</span></code></pre></div>然后我们调试看看<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/34.png" srcset="/img/loading.gif" alt="img"><br>可以发现已经成功了，至于我为什么要用到city[0:-1]，是为了对接微信的地理位置数据，这个我会在下一次的博文介绍。<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>这次的难点主要在数据并不是一个单独的json包里，需要我们自己从html代码中获取，并且获取的是js代码，我们还要额外提取其中的数据，总的来说还是难度不大的。<br>如果有疑问可以在下面评论联系我，那我们下期见~</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实战Python爬取B站评论</title>
    <link href="/tutorial/python-spider-bilibili-comments.html"/>
    <url>/tutorial/python-spider-bilibili-comments.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>本人是一个崩坏三的游戏玩家，大家也都知道官方会因为一些活动，在其他平台发布一些兑换码。为了更方便的获取水晶，就一直有这么个想法，想爬取B站的评论，利用热心网友在官方账号动态下发的评论，来实现获取最新的水晶兑换码。（本思路启迪于酷安一位用网站RSS获取水晶码的大佬，很早以前见过他的帖子，但现在找不到了，这里匿名感谢下） </p><a id="more"></a>   <h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><hr><p>本次用到的有：  </p><ol><li>浏览器 （本人使用的是Chrome）  </li><li>Python3（模块包含：requests，json，time）<br>本次实战的地址：<a href="https://space.bilibili.com/27534330/dynamic" target="_blank" rel="noopener">https://space.bilibili.com/27534330/dynamic</a><br>本次实战的目标：爬取下该链接下的所有评论  <h1 id="实战开始"><a href="#实战开始" class="headerlink" title="实战开始"></a>实战开始</h1></li></ol><hr><h3 id="获取评论数据包"><a href="#获取评论数据包" class="headerlink" title="获取评论数据包"></a>获取评论数据包</h3><p>打开开发者工具，然后通过查看评论来获取我们要的数据包，很好找<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/23.png" srcset="/img/loading.gif" alt="img"><br>然后我们模拟发送get包来获取数据</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_comment</span><span class="hljs-params">(oid=str,types=int)</span>:</span>    headers_small=&#123;        <span class="hljs-string">'Accept'</span>:<span class="hljs-string">'*/*'</span>,        <span class="hljs-string">'Accept-Encoding'</span>:<span class="hljs-string">'gzip, deflate, br'</span>,        <span class="hljs-string">'Accept-Language'</span>:<span class="hljs-string">'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7'</span>,        <span class="hljs-string">'Connection'</span>:<span class="hljs-string">'keep-alive'</span>,        <span class="hljs-string">'Cookie'</span>:<span class="hljs-string">r''</span>,        <span class="hljs-string">'Host'</span>:<span class="hljs-string">'api.bilibili.com'</span>,        <span class="hljs-string">'Referer'</span>:<span class="hljs-string">'https://space.bilibili.com/27534330/dynamic'</span>,        <span class="hljs-string">'Sec-Fetch-Mode'</span>:<span class="hljs-string">'no-cors'</span>,        <span class="hljs-string">'Sec-Fetch-Site'</span>:<span class="hljs-string">'same-site'</span>,        <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'</span>    &#125;    <span class="hljs-keyword">if</span> types==<span class="hljs-number">2</span>:        rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=11&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)    <span class="hljs-keyword">elif</span> types==<span class="hljs-number">8</span>:            rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=1&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)    <span class="hljs-keyword">elif</span> types==<span class="hljs-number">4</span>:        rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=17&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)    <span class="hljs-keyword">elif</span> types==<span class="hljs-number">1</span>:        rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=17&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)    <span class="hljs-keyword">else</span>:        print(<span class="hljs-string">"types error"</span>+str(types))</code></pre></div><p>嗯<br>*<em>这里用到了两个参数，一个oid对应的是帖子的标识码，获取方法在下方，还有一个参数type是帖子的类型，对应了url里面的type，这里先一笔带过，具体我会在下面的内容中写到。 *</em></p><hr><p>然后我们分析response，通过返回的数据我猜测这是一个jQuery，奈何我没学过，但是不要紧，它的数据类型和json很像，于是我将jQuery的特征码去除，直接当作json处理<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/24.png" srcset="/img/loading.gif" alt="img"></p><div class="hljs"><pre><code class="hljs python">rsp_json=json.loads(rsp.text[<span class="hljs-number">42</span>:<span class="hljs-number">-1</span>])</code></pre></div><p>这段代码就是实现将jQuery特征码去除，变成我们可以处理的json.<br>然后利用network里的preview，我们可以很清晰的得出评论的目录为<strong>/data/hots/(0-5)/content/message</strong><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/25.png" srcset="/img/loading.gif" alt="img"><br>于是写出如下代码</p><div class="hljs"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(rsp_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"hots"</span>])):        print(str(i+<span class="hljs-number">1</span>)+<span class="hljs-string">":   "</span>+rsp_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"hots"</span>][i][<span class="hljs-string">"content"</span>][<span class="hljs-string">"message"</span>])        print(<span class="hljs-string">"_______________________________________"</span>)<span class="hljs-keyword">except</span>:    <span class="hljs-keyword">pass</span></code></pre></div><p>到此，我们的获取评论数据功能已经实现（这里我选择的是热评，对应的是hots，也可以自己选择爬取所有的评论）。接下来是获取oid数据来实现批量爬取。</p><h3 id="获取动态数据包"><a href="#获取动态数据包" class="headerlink" title="获取动态数据包"></a>获取动态数据包</h3><p>首先打开开发者工具，通过刷新来重新获取发送与接受到的数据。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/gif_1.gif" srcset="/img/loading.gif" alt="gif"><br>找到我们需要的获取动态的包（小技巧是获取完动态的数据后肯定要向服务器获取动态的一些静态图片，所以在一堆图片的数据包前面找）<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/21.png" srcset="/img/loading.gif" alt="img"><br>然后将headers复制，按照之前的步骤一样，模拟数据包的发送<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/22.png" srcset="/img/loading.gif" alt="img"><br>写完数据包的发送后，我们开始对发送回来的response进行处理，这里直接通过浏览器的preview进行分析处理（排版挺好的），得出结论我们需要的动态地址的关键信息oid目录为<strong>/data/cards/(0-19)/desc/dynamic_id_str(或者rid_str)</strong>，说实话这里的oid分析卡了我好几天，因为根据动态的类型不同，对应的oid可能是rid，也可能是dynamic_id。<br>最后我通过穷举法归纳了以下，根据<strong>/data/cards/(0-19)/desc/type</strong>，2和8对应的是oid是rid，其他的4和1对应的是dynamic。<br>利用json，故得出以下代码</p><div class="hljs"><pre><code class="hljs python">dynamic_json=json.loads(dynamic.text)comment_list=[]comment_type_list=[]<span class="hljs-keyword">try</span>:    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>])):        comment_type=dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>][i][<span class="hljs-string">"desc"</span>][<span class="hljs-string">"type"</span>]        <span class="hljs-keyword">if</span> comment_type == <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> comment_type==<span class="hljs-number">8</span> :            comment_list.append(dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>][i][<span class="hljs-string">"desc"</span>][<span class="hljs-string">"rid_str"</span>])        <span class="hljs-keyword">else</span>:            comment_list.append(dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>][i][<span class="hljs-string">"desc"</span>][<span class="hljs-string">"dynamic_id_str"</span>])        comment_type_list.append(comment_type)        <span class="hljs-keyword">except</span>:    <span class="hljs-keyword">pass</span><span class="hljs-keyword">return</span>([comment_list,comment_type_list])</code></pre></div><p>在这里我将oid与type一并返回了，type将在后来的评论获取中再次派上用处。到这里我们其实已经实现了所有功能，只要将上面两个function结合，即可实现爬取所有动态的评论。</p><h3 id="type与oid的处理"><a href="#type与oid的处理" class="headerlink" title="type与oid的处理"></a>type与oid的处理</h3><p>我觉得这是整个爬取过程的难点，直到这篇文章发布前，我仍未找到有效的解决方法，只能用穷举法。所幸也实现了我们需要的功能。<br>重新来看看我们评论数据包的地址，发现oid与动态对应的地址对上了，也就是我们之前获取的dynamic<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/26.png" srcset="/img/loading.gif" alt="img"><br>但是也有些动态并不符合这个规律，它的oid没有与动态的地址对应，也就不是dynamic，而是rid。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/27.png" srcset="/img/loading.gif" alt="img"><br>经过穷举的尝试，得出如下结论：<br>获取的type为2时，评论地址的oid对应rid，地址的type对应11<br>获取的type为8时，评论地址的oid对应rid，地址的type对应1<br>获取的type为4时，评论地址的oid对应dynamic，地址的type对应17<br>获取的type为1时，评论地址的oid对应dynamic，地址的type对应17<br>于是才得出了上面写的代码。  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p>以下为我在个人尝试中的一些错误，仅供各位参考借鉴：  </p><ol><li>受老旧思想禁锢，我的第一感觉是直接访问动态的地址来获取信息，也就是request-<a href="https://space.bilibili.com/27534330/dynamic" target="_blank" rel="noopener">https://space.bilibili.com/27534330/dynamic</a>  。结果错误返回，提示过多的重定向错误<div class="hljs"><pre><code class="hljs plain">requests.exceptions.TooManyRedirects: Exceeded 30 redirects.</code></pre></div>于是我通过查找信息,添加参数allow_redirects=False来忽略这个错误，结果是不报错了，但仍然没得到想要的数据，后来才想到通过数据包来获取动态数据  </li><li>jQuery那段我也不清楚是不是jQuery，毕竟没接触过。然后凑巧的是当我将他前面的无关数据剔除掉后，他就是一个非常完美的json数据格式，有点投机取巧的感觉。  </li><li>最后一点就是type和oid了，说实话穷举的方法实在不可取，但也是没办法，他获取的type也与链接里的type并不一致。目前我的猜想是在之前的数据包中有类似的js文件，用来进行对type的处理。  <h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2>全文共5200余字，感谢你能看到这里，打赏这种不可能的我也就不说了。成品文件我已放在了<a href="https://github.com/liuyunfz/bilibili_Extraction-cover/blob/master/bh3.py" target="_blank" rel="noopener">我的GitHub</a>上，如果有什么疑问或者我的代码有何问题，请在下方的评论区回复。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
      <tag>bilibili</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为hexo-yilia添加文章阅读数</title>
    <link href="/tutorial/hexo-busuanzi.html"/>
    <url>/tutorial/hexo-busuanzi.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直想为博客添加一个阅读数统计，一个是方便查看，另一方面也会使自己更有成就感。于是在网上搜索了下教程，发现hexo的统计大多用的都是不蒜子的统计，于是也就随大流使用。但是在期间遇到了一些问题，并进行了一个客制化修改，具体样式应该也可以在右上角看到，仅供参考借鉴。</p><a id="more"></a><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="1："><a href="#1：" class="headerlink" title="1："></a>1：</h3><p>首先修改<strong>\themes\yilia\layout\_partial</strong>目录下的<strong>after-footer.ejs</strong>文件，在任意位置添加以下代码</p><div class="hljs"><pre><code class="hljs bash">&lt;script async src=<span class="hljs-string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/19.png" srcset="/img/loading.gif" alt="avatar"><br><br></p><h3 id="2："><a href="#2：" class="headerlink" title="2："></a>2：</h3><p>然后再修改<strong>\themes\yilia\layout\_partial</strong>目录下的<strong>article.ejs</strong>文件，在&lt;%- partial(‘post/title’, {class_name: ‘article-title’}) %&gt;代码下添加</p><div class="hljs"><pre><code class="hljs bash">&lt;!--显示阅读次数--&gt;        &lt;% <span class="hljs-keyword">if</span> (!index &amp;&amp; post.comments)&#123; %&gt;          &lt;br/&gt;          &lt;a class=<span class="hljs-string">"cloud-tie-join-count"</span> href=<span class="hljs-string">"javascript:void(0);"</span> style=<span class="hljs-string">"color:gray;font-size:14px;"</span>&gt;          &lt;span class=<span class="hljs-string">"icon-sort"</span> id=<span class="hljs-string">"busuanzi_container_page_pv"</span> style=<span class="hljs-string">"font-size:14px;margin-left:84.4%;"</span>&gt;                    阅读总数: &lt;span id=<span class="hljs-string">"busuanzi_value_page_pv"</span> style=<span class="hljs-string">"color:#ef7522;"</span>&gt;&lt;/span&gt;次 &amp;nbsp;&amp;nbsp;          &lt;/span&gt;          &lt;/a&gt;</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/20.png" srcset="/img/loading.gif" alt="avatar"><br>当然也可以根据自己的审美需求修改代码的位置或者颜色等，如果有不清楚的可以与我讨论（虽然我也不太懂，是个半吊子）</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>hexo</tag>
      
      <tag>yilia</tag>
      
      <tag>不蒜子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日记-2020年1月20日</title>
    <link href="/diary/20200120.html"/>
    <url>/diary/20200120.html</url>
    
    <content type="html"><![CDATA[<p>马上就是新的一年，先祝大家在2020新的一年里新年快乐。<br><br></p><h1 id="这次的更新有："><a href="#这次的更新有：" class="headerlink" title="这次的更新有："></a>这次的更新有：<br></h1><ol><li><strong>添加网站ICO图标<br></strong></li><li><strong>利用不蒜子添加了网页阅读次数</strong><a id="more"></a>虽然更新的内容不多，但中通还是遇到了各种各样问题。<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题 "></a>遇到的问题 <br></h1></li></ol><h2 id="404问题"><a href="#404问题" class="headerlink" title="404问题"></a>404问题</h2><p>这是一个老问题了，基本每次我更新网站都会遇到。当我调试好功能，并且在本地 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 正常显示<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/15.png" srcset="/img/loading.gif" alt="img"><br>于是我将它提交到GitHub上，然后便出现了404找不到网页的错误。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/16.png" srcset="/img/loading.gif" alt="img"><br>提交是正确的，我也在GitHub上校对了仓库文件，始终无法找到是哪里错误。<br><br>解决办法也很简单，就是每次最后一次成功提交并且可访问时，将文件进行备份，当出现提交后404则还原备份，然后重新更新一次，看似没有任何实质性的解决，但每次利用备份第二次提交却都可以正常访问，这点一次困扰了我很久，希望有遇到过类似问题的人可以<a href="mailto:liuyunfz@gmail.com">与我联系</a>，不胜感激。<br><br></p><h2 id="阅读次数的显示问题"><a href="#阅读次数的显示问题" class="headerlink" title="阅读次数的显示问题"></a>阅读次数的显示问题</h2><p>为了与自身审美相适应，对网上的代码进行了更改（具体见我的添加不蒜子统计教程），但仍出现了不同分辨率设备的显示问题，这个问题也还待解决，也就先这样吧，至少在我的电脑上是正常显示的。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/17.png" srcset="/img/loading.gif" alt="img"><br><br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/18.jpg" srcset="/img/loading.gif" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生产力工具-用Python做一个headers转换</title>
    <link href="/tutorial/python-tools-transform_headers.html"/>
    <url>/tutorial/python-tools-transform_headers.html</url>
    
    <content type="html"><![CDATA[<p>每次写爬虫都要复制浏览器上的headers，而它又与python中的dict类型不符，每次都要自己一行行加引号加逗号分割。这次我们就用python识别剪辑版的headers内容来一键转换成我们要的dict类型，实现一劳永逸。</p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul><li>Python</li><li>VS Code</li><li>tkinter模块<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2>python中dict类型样式为:{<br>a:”value”,<br>b:”value”,<br>c:”value”}<br>利用python3自带的tkinter模块识别剪辑版内容，然后利用分割进行重写并加入末尾逗号，最后判断最后一行break<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="hljs"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> Tk<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transform</span><span class="hljs-params">(text=str)</span>:</span>    strlist=text.split(<span class="hljs-string">": "</span>)    strheaders=<span class="hljs-string">"'&#123;0&#125;':'&#123;1&#125;'"</span>.format(strlist[<span class="hljs-number">0</span>],strlist[<span class="hljs-number">1</span>])    <span class="hljs-comment">#print(strheaders)</span>    <span class="hljs-keyword">return</span> strheadersr = Tk()<span class="hljs-comment"># read the clipboard</span>c= r.clipboard_get()c_list= c.split(<span class="hljs-string">"\n"</span>)headers=<span class="hljs-string">""</span><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> c_list:    <span class="hljs-keyword">if</span> item==c_list[<span class="hljs-number">-1</span>]:        headers=headers+ transform(item)    <span class="hljs-keyword">else</span>:        headers=headers+ transform(item)+<span class="hljs-string">",\n"</span>    print(headers)</code></pre></div></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为hexo博客图片添加CDN加速</title>
    <link href="/tutorial/hexo-CDN.html"/>
    <url>/tutorial/hexo-CDN.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 众所周知，<a href="https://github.com/" target="_blank" rel="noopener">Github</a>是全球最大的社交编程及代码托管网站，但是由于他是国外的产品，所以导致我们访问会比较慢，有时甚至可能出现无法访问的情况。<br><br>本博客就是部署与GitHub上的（剩下了花钱买空间以及备案等杂事），但是也因此访问速度是个很大的诟病，尤其是一些技术博客中由于图片质量导致体积较大，加载慢影响阅读。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/14.png" srcset="/img/loading.gif" alt="img"></p><a id="more"></a><br>这是添加CDN之前的测速详情<br><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/9.png" srcset="/img/loading.gif" alt="avatar"><br><br></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>本次使用的是 <a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a> ，一个免费的cdn，支持npm，GitHub，wordpress。<br>操作十分简单，只需要利用他提供的网站引用自己要调用的GitHub资源即可。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/10.png" srcset="/img/loading.gif" alt="avatar"><br>一般我hexo写md时，是将图片放到source\img目录下，然后利用</p><div class="hljs"><pre><code class="hljs bash">![img](/img/9.png)</code></pre></div><p>这样进行调用的就是我最上面的那个测速图片。<br>而我们要做的操作就是将路径地址改为网址。</p><div class="hljs"><pre><code class="hljs bash">![img](https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/9.png)</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/11.png" srcset="/img/loading.gif" alt="avatar"><br>这样就实现了CDN对图片进行加速。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/12.png" srcset="/img/loading.gif" alt="avatar"><br>这就是我添加CDN后的测速结果，看上去好像并没有什么太大的区别，因为这个jsdelivr本来也就是国外的。<br>虽然测速没什么区别，但实际访问的体验上我感觉还是可以的。其实如果经济支持的话，可以购买一些国内的CDN加速服务，效果会很明显。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。（内容来自百度百科）<br><br>按照我的理解大概就是CDN服务器先提交把数据给缓存到CDN服务器那里，当你向他索取时，它就把它缓存的数据直接转送给你。举个形象点的例子，你想参加跑步比赛但是跑不过别人，你请来了小明，他帮你拿到了第一名，然后把奖牌给你了。（#大雾）<br><br>这个CDN可能是实时访问转递的，就是当你要访问数据时他才去GitHub上当下数据，然后再传过来。猜想是源于我朋友写的一个p站爬虫，由于总所周知的原因，p站无法直接进行访问，所以他在国外服务器上加了一个php，后面传递要访问的网址，然后他会自动返回那个网址的内容。相当于充当了中介桥梁。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>本期博客启发于CSDN的一篇文章：<a href="https://blog.csdn.net/qq_36759224/article/details/86936453" target="_blank" rel="noopener">免费CDN：jsDelivr+Github 使用方法</a><br><br>其实相比于用jsdelivr加速不如用七牛云储存图片外链，直接通过外链访问图片。速度应该能更快上一点，而且我印象中好像用户有免费的20G流量配额，但是手持身份证实名劝退。有兴趣的也可以自行了解一下：<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>hexo</tag>
      
      <tag>cdn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日记-2019年8月31日</title>
    <link href="/diary/20190831.html"/>
    <url>/diary/20190831.html</url>
    
    <content type="html"><![CDATA[<p>本站域名已成功由GitHub自给域名：liuyunfz.github.io 替换为 blog.6yfz.cn</p><a id="more"></a><p>在昨日，我已从华为云上购买了6年的.cn域名权限。因为cn是需要强制实名的域名，所以我于昨晚23时左右提交了实名申请。结果当我睡觉时，今日凌晨0:30分我就收到了华为云发来的右键说我已经实名认证成功。不得不赞叹华为云的处理速度。<br>目前已经能通过新域名正常访问了，更多的如HTTPS就下次再说吧。</p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【issue 已解决】关于4399造梦西游的存档保存</title>
    <link href="/issue/issue-4399-saving.html"/>
    <url>/issue/issue-4399-saving.html</url>
    
    <content type="html"><![CDATA[<div class="note note-primary"><p><strong>2019.10.05更新：issue已解决，但因为某些原因本站不提供解决方案与相关步骤</strong></p></div>  <h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我在一次偶然的尝试中抓包发现，当我点击造梦西游的保存存档按钮时，他会提交一个包，证明flash的数据也是通过发post对存档数据进行云端同步的，于是我便想通过更改提交的数据来实现修改甚至实现复制存档等操作。</p><a id="more"></a><h1 id="实战问题"><a href="#实战问题" class="headerlink" title="实战问题"></a>实战问题</h1><p>当我尝试抓包时，很明显的发现了，当提交存档时，里面有个save包，而里面的数据<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/6.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>我通过对比分析大致可以读出index是存档的位置，title是你选的职业，uid应该是4399账号的uid，refer这个在headers里也比较常见，是这个flash的直链。data我猜测应该就是存档的数据，具体分析的话我也无从下手，所以便打算试试存档复制。即把账号A的数据复制到账号B。<br><br>当我继续往下看时却发现了两个不太友好的东西，一个是token，一个是verify这两个一看就知道是验证。token有点奇怪，这边竟然是空，让我有点摸不着头脑。至于剩下的参数我这边也给出答案，gamekey相当于是这个游戏的uid，同一个游戏是固定的，所以暂时不用管，同理gameid。session:-1暂时应该也不需要我们去研究。<br><br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/7.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>在save前面有个包，根据链接我们猜测这就是获取token，结果是什么都没返回，也对应了我们之前的token是空。<br>但是到了这问题就出来了，token就算空吧，也有获取方法了，但verify完全一点头绪也没有。</p><h2 id="自发研究"><a href="#自发研究" class="headerlink" title="自发研究"></a>自发研究</h2><p>我先介绍一些我尝试并未成功的方法。</p><h3 id="从头抓包"><a href="#从头抓包" class="headerlink" title="从头抓包"></a>从头抓包</h3><p>因为我点击保存后就这么四个包，所以我在想verify会不会在前面加载网页时就获取了，所以我尝试从头开始抓包。<br><br><br>结果当然是我失败了，并没有找到一点线索，其实理性分析也知道，verify是根据存档数据（data）以及index，title等综合加密的（我有尝试过修改任何单个数据，都未成功，所以得出结论verify是根据除自身外所有数据加密计算得出的）</p><h3 id="寻找js"><a href="#寻找js" class="headerlink" title="寻找js"></a>寻找js</h3><p>我尝试在网页中寻找js，看看有没有什么方法调用来计算出verify（这边的灵感来自于酷安一位大佬分析的抓取百度指数文章）。<br><br>可能是我本身水平不够吧，或者本来就不在页面js里，所以我并未成功找到相关内容。<br>如果有人看到这可以自行尝试一下</p><h1 id="可能猜测"><a href="#可能猜测" class="headerlink" title="可能猜测"></a>可能猜测</h1><p>现在我的猜测可能就是这段verify计算是在flash内实现的（灵感来自于更早段时间我尝试抓取4399手机游戏盒登录包，里面也有一段验证和密码加密，最后我在论坛上看到了，包的数据是4399游戏盒内置的算法，需要通过逆向分析得出加密的key然后再利用base加密）。这边多提一句，4399游戏盒密码加密用到了DES加密的CBC规则，这个我也在实战中失败了，如果有懂得大佬请务必联系我。<br><br>所以现在我觉得需要实现的操作就是逆向flash得出里面的具体加密算法才能成功计算出verify。</p><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="有用的包"><a href="#有用的包" class="headerlink" title="有用的包"></a>有用的包</h2><p>抓包过程中我也收获了一些可能还算能用的上的包<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/8.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>比如这个get_list包，好像只需要cookie，uid和gameid即可获得游戏的存档信息。<br><br>还有一个包是点击存档后，会提交一个包访问云端的数据来读取data，也还算有用</p><h2 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h2><p>虽然我无法实现开篇想要的复制存档功能，但是我可以通过实现反复提交来实现：回档！   这个我也有试过很多次，verify不会随时间变化，只要抓一次包就可以一劳永逸，这也更加确定了前面说的verify是根据提交数据综合来计算的。</p><h2 id="前景展望"><a href="#前景展望" class="headerlink" title="前景展望"></a>前景展望</h2><p>如果如我猜测所想是隐藏在flash中，要是在将来能逆向攻破。那么根据包里的数据gameid和gamekey可以推出，我们可以将这个方法作用于所有4399需要登录的游戏中！并且实现任意更改存档内容，实现一些理论上不会出现的情况。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>这篇文章是我用来分享我在实际操作中遇到的问题以及获得的收获。如果你对这篇文章有所看法或有解决方法，欢迎给我寄送邮件，或者联系我的WeChat。<br>当这个问题解决后，我会在博客中写出我对应的解决过程，并将此篇issue的标题改为已解决。</p>]]></content>
    
    
    <categories>
      
      <category>issue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>issue</tag>
      
      <tag>4399</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实战破解4399HASH验证</title>
    <link href="/tutorial/python-spider-4399-hash.html"/>
    <url>/tutorial/python-spider-4399-hash.html</url>
    
    <content type="html"><![CDATA[<h1 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h1><p>4399作为一个小型的游戏平台，代码安全以及复杂方面远不及BAT等大型公司来的难。因此被我当作爬虫的热身网站。我曾把4399的登录包，注册包，以及一大推的获取个人信息包都写了。然后是要实战一些模拟操作了。<br><br><br>而当我转向尝试去模拟4399群组中关注他人时，却被恶心到了，除了常规的验证码，提交的包中还多了一个HASH参数。略懂电脑基础知识对的应该都不陌生，虽然可能不是传统意义上的hash，但必然是一串验证代码。<br><br>而这次我们就来实战攻破4399的HASH验证。</p><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><blockquote><p><strong>Python[模块：json,requests,matplotlib,execjs]</strong><br><strong>Chrome<br>VS Code</strong></p></blockquote><h1 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h1><p>我们先尝试用浏览器进行抓包分析。<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/1.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>可以看到当我们点击关注时，系统会发送一个关注包，这时他会自动判断（玄学）是否需要输入验证码。如果需要则会再发送两个包，一个是图中的geturl?type=zone<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/2.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>可以看到，这个包的作用是获得验证码的地址。</p><div class="hljs"><pre><code class="hljs bash">def geturl(cookie):    get_headers=&#123;    <span class="hljs-string">'Accept'</span>: <span class="hljs-string">'application/json, text/javascript, */*; q=0.01'</span>,    <span class="hljs-string">'Accept-Encoding'</span>: <span class="hljs-string">'gzip, deflate'</span>,    <span class="hljs-string">'Accept-Language'</span>: <span class="hljs-string">'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7'</span>,    <span class="hljs-string">'Connection'</span>: <span class="hljs-string">'keep-alive'</span>,    <span class="hljs-string">'Cookie'</span>: cookie,    <span class="hljs-string">'Host'</span>: <span class="hljs-string">'my.4399.com'</span>,    <span class="hljs-string">'Referer'</span>: <span class="hljs-string">'http://my.4399.com/u/2576802349'</span>,    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span>,    <span class="hljs-string">'X-Requested-With'</span>: <span class="hljs-string">'XMLHttpRequest'</span>    &#125;    rsp = requests.get(url=<span class="hljs-string">"http://my.4399.com/plugins/captcha/index-getUrl?type=zone"</span>,headers=get_headers)        url=json.loads(rsp.text)    url = url[<span class="hljs-string">"result"</span>][<span class="hljs-string">"url"</span>]    <span class="hljs-built_in">return</span> url</code></pre></div><p>根据这个包返回的格式我们判断出是json文件，所以利用json模块进行转换，然后按照格式取出包含在其中的URL。<br><br><br>这个时候我们还无法看出HASH的具体作用，我们输入验证码继续看看提交了什么<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/3.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>可以看到，当我们提交了验证码，后面多了一个index-check的包，大概能猜出是验证码验证进行check。其中三个参数，type：zone.cap就是验证码了，hash就是我们这篇要解决的内容了。<br><br>我们知道了用处，回去看下之前那个GET-HASH包<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/3.png" srcset="/img/loading.gif" alt="avatar"><br><br>返回的是一堆json代码，我们尝试在命令提示符运行，可以看到，完美符合提交的HASH值。<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/4.png" srcset="/img/loading.gif" alt="avatar"><br><br>接下来的难点就是如何通过这个包返回的代码，利用python计算出hash，如果直接是json代码运行还可以，但是我们仔细观察可以看出，在返回的代码中，最后一句的大致意思是给网页中ID为cap_hash的对象赋值hash，但是在python中，我们并不会有相关的对象，所以我们得想办法取出我们想要的代码。<br>我首先想到的是读取行</p><div class="hljs"><pre><code class="hljs bash">listd=rsp.text.split(<span class="hljs-string">"\n"</span>)<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> listd:        <span class="hljs-built_in">print</span>(i,<span class="hljs-string">"\n"</span>,<span class="hljs-string">"————————————————————————————————————————————————————————"</span>)</code></pre></div><p>返回的就有点奇怪</p><div class="hljs"><pre><code class="hljs bash">var _4ba4cacd070fe=/*8/<span class="hljs-string">"e0*//*+f c62'c6-*/'_aa6b9'/*3=b8d'*/+/*5'5 3*/'69b11784ed'/*9"</span>b/;*/+/*,-5=4/;+_*/<span class="hljs-string">'a4f581c4'</span>/*;==,<span class="hljs-string">"18*/+/*/'+++9/9-*/'af15edcd1'/*a 48;4,,9*/+  ————————————————————————————————————————————————————————        ''/*8f3c2+2;61*/;var _1eff743fb70c3ef68=/*3+=1+/- 5*/''/*;4ead70"</span>*/;var _f98ed25c1ead835f23e9fa=decodeURIComponent(/*<span class="hljs-string">"4ce8*//*f"</span>+9-,d1c8*/<span class="hljs-string">'%29%00'</span>/*=5--5_6+e8*/+/*f9c0=*/<span class="hljs-string">'%13%16%3'</span>/*<span class="hljs-string">'+d"c2 d*/+/*46 50*/'</span>D%5DU%0CW<span class="hljs-string">'/*/1f7db*/+/*4/d1"9c/d*/'</span>%00%00<span class="hljs-string">'/*'</span>3+<span class="hljs-string">'d54*/+/*c 854*/'</span>R%5BW<span class="hljs-string">'/*9-/b+3*/+/*87-9_;*/'</span>T%05Y%00W<span class="hljs-string">'/*c"'</span>00*/+/*--a;2*/<span class="hljs-string">'%04%0D'</span>/*4ce44_*/+/*a,b94_0_-*/<span class="hljs-string">'RZ%0C%0'</span>/*2_3e+b57f*/+/*_<span class="hljs-string">'__"c-/*/'</span>5%05%0<span class="hljs-string">'/*04+a6 b2,*/+/*=+=42*/'</span>7Q%5DSP<span class="hljs-string">'/*9474e*/+/*'</span>ee5c<span class="hljs-string">'/ad*/'</span>T%06jT%0<span class="hljs-string">'/*a2,";"b 2*/+/*f_- _1d/ef*/'</span>7S__CW%<span class="hljs-string">'/*5b,e6*/+/*638fd*/'</span>01EXXV<span class="hljs-string">'/*5f,+/67-*/+/*946f33*/'</span>%1CL%1F%<span class="hljs-string">'/*f5/9;868f*/+/*;9_;+4-*/'</span>17U%14<span class="hljs-string">'/*-42b210'</span>-*/+/*20<span class="hljs-string">";+*/'%15gRZ%01X'/*3_,a8*/+/*aeb0-*/'VP%03VQ%0'/*,ad39"</span>*/+/* ,01f_2/1<span class="hljs-string">'*/'</span>1%02%01%3<span class="hljs-string">'/*/2590/3a*/+/*5'</span>=57ff,b1*/<span class="hljs-string">'EV%05%0'</span>/*<span class="hljs-string">"208=3/*/+/*0=599/"</span><span class="hljs-string">'*/'</span>2R%0FS%0<span class="hljs-string">'/*79_-1",*/+/*==='</span>9=<span class="hljs-string">'0;e*/'</span>0_%16%16<span class="hljs-string">'/*;7/-3*/+/*=b61;a8-5*/'</span>%0CgW%5CQ<span class="hljs-string">'/*,5b/f554*/+/*90",a7*/'</span>X%04%07<span class="hljs-string">'/*e2/03076*/+/*92/ae-*/'</span>%03%0B%04%<span class="hljs-string">'/*69+0/__2_6*/+/*'</span> fd25_*/<span class="hljs-string">'01RQ%07'</span>/*34a3e,<span class="hljs-string">"*/+/*4-f3251c*/'%06QQTU%01'/*9ec"</span>9 0*/+/*2 8f/f*/<span class="hljs-string">'%08t%'</span>/*d+ 5fef7=*/+/*3c6c3*/<span class="hljs-string">'5CF%07W%0'</span>/*d;92d*/+/*;=4db<span class="hljs-string">'0*/'</span>F%11%<span class="hljs-string">'/*a"182+-de*/+/*5ce 6,,c0*/'</span>02%3DR%0<span class="hljs-string">'/*1=9a7=*/+/*1/;9//255b*/'</span>8%02%01%04<span class="hljs-string">'/*_0+=a/*/+/*a6257+09*/'</span>%04RR%01<span class="hljs-string">'/*5/ 9-*/+/*2,2-;f2*/'</span>%04S%<span class="hljs-string">'/*3,'</span>377*/+/*6<span class="hljs-string">"=6"</span>b*/<span class="hljs-string">'08PTPUV%0'</span>/*929a3d1/*/+/* 1a5cb*/<span class="hljs-string">'7P%5C'</span>/*7a<span class="hljs-string">'0"b*/+/*,_3173+/_*/'</span>O%5EC%0<span class="hljs-string">'/*b846+"96,"*/+/*;c4-23*/'</span>7jWP%0<span class="hljs-string">'/*d8'</span>,99-8a*/+/*8<span class="hljs-string">"='8bb'5,*/'2Z%0A'/*6170/8b,9_*/+/*_be658_*/'%11%02%3D'/*699=-=e*/+/*27f9809*/'R%08%02'/* d97+6105;*/+/*9+36/4+c7*/'%01%04'/*81+"</span>2*/+/*,1; c7=c*/<span class="hljs-string">'%04RR%01'</span>/*6 3,+4;1*/+/*7fd d/d<span class="hljs-string">'b0*/'</span>%04S%<span class="hljs-string">'/*1;0571_*/+/*'</span>a5<span class="hljs-string">'+_+- ,*/'</span>08PTPUV<span class="hljs-string">'/*ab-5e=e*/+/*"5fe e802*/'</span>%07P%5C<span class="hljs-string">'/*e6a2,d*/+/*=+_;ed-*/'</span>O%5ECMfPF<span class="hljs-string">'/*41=b"5*/+/*=24b1'</span>=a*/<span class="hljs-string">'%0D%3'</span>/*70d_9c*/+/*,;_b0;5a*/<span class="hljs-string">'DZ%0F'</span>/*33967*/+/*5+3; */<span class="hljs-string">'%0C%5B%01P'</span>/*,93352f*/+/*4 ,<span class="hljs-string">'0*/'</span>%01%0<span class="hljs-string">'/*+;3+_8+*/+/*5+;0,/ 9ec*/'</span>B%01%07<span class="hljs-string">'/*+ c; */+/*/b;3_6c,*/'</span>%02QUQQ%0C<span class="hljs-string">'/*'</span>b1f54*/+/* 0 2;*/<span class="hljs-string">'%01UQX'</span>/*2ad=3f-*/+/*_ 5240f*/<span class="hljs-string">'M%0C%12P%'</span>/*;4f2d91*/+/*2_d<span class="hljs-string">'8;4*/'</span>05D_n%3CXT<span class="hljs-string">'/*f2d3"*/+/*,38/66cb*/'</span>%0FRX%00%<span class="hljs-string">'/* 3;;_*/+/*;67"6'</span>_1*/<span class="hljs-string">'0AWSW%0'</span>/*a_13_94<span class="hljs-string">'a*/+/*772a_9,*/'</span>7Y%03%<span class="hljs-string">'/*+c+6f6;d-*/+/*d;13a1e66+*/'</span>01PQ%02%0<span class="hljs-string">'/*a+5611*/+/*-"7b2*/'</span>3%0C%13%<span class="hljs-string">'/*86cc"=-*/+/*4f"a'</span>f*/<span class="hljs-string">'0CDQ%'</span>/*ba6b3+;*/+/*bef5<span class="hljs-string">'61*/'</span>04A%0Aj%<span class="hljs-string">'/*6;'</span><span class="hljs-string">"6"</span>a<span class="hljs-string">"/*/+/*3+_f4'6*/'06%5D'/*094/5fc52;*/+/*e"</span>d2b9+97*/<span class="hljs-string">'V%5D%0'</span>/*d064b<span class="hljs-string">"b7eb*/+/*8f3=ae;8*/'1%3EWR%0'/*+=-'4*/+/*_7383a*/'3%00_%06X'/*34;"</span>3,6;8*/+/*44c bca ea*/<span class="hljs-string">'UU%05%07%0'</span>/*+0c5,*/+/*e0d880_3f*/<span class="hljs-string">'EQ%5CO%5C%'</span>/*f0,,f aa9*/+/*a+9a<span class="hljs-string">";,*/'13S%02YWU'/*e6-3,36e"</span>*/+/*0e428,, <span class="hljs-string">"8*/'%05%03S'/*d /119-e'*/+/*3;/d-40c2-*/'%16%0E%3'/*f87/;24b,*/+/*'e bfb,*/'A%07Z'/*/_554*/+/*c6+=588-c_*/'Q%08o%00W'/*=fecc*/+/*ce 3"</span>ce*/<span class="hljs-string">'%05W%5'</span>/*ad1_<span class="hljs-string">"505*/+/*,+a-d*/'BP%09%03'/*6 ee7,;/*/+/*=5-7a0a*/'%06U%03'/*e9df5c*/+/*d=6 1*/'%08%02%'/*cd'915,/31*/+/*'f7b/,d*/'00%5DJ%'/*,3/6d*/+/*4-6b0"</span>6c11*/<span class="hljs-string">'09A%03'</span>/*b9f001*/+/*1,549=5cf */<span class="hljs-string">'%5E%04S%'</span>/*84a6f; */+/*1<span class="hljs-string">'6"/-,"*/'</span>00XVW%07SC<span class="hljs-string">'/*3_9'</span>7<span class="hljs-string">"b 8*/+/*8;_45/0;"</span>9*/<span class="hljs-string">'X%16T'</span>/*1030a/ _ce*/+/*228,ac*/<span class="hljs-string">'%2B%14%13'</span>/*18;_6*/+/*657; ++3<span class="hljs-string">"*/'XBfU%00W%0'/*a+0f  f_9*/+/*7;26,*/'8%01V%0E%0'/*280/09a//*/+/*'aa7 _*/'7P%06'/*/2cc9*/+/*3 b5_*/'%07%0'/*_b9 ==*/+/*4ca/df+*/'4%07%02%'/*_-0/630*/+/*4= ''9d2b-*/'5C%05'/*'d=_3d7b"</span>*/+/*-f<span class="hljs-string">"37cd9*/'S%02%04'/*/=3=de603*/+/*;,5a3*/'_%0AH%5E'/*2f6+'0b3*/+ ————————————————————————————————————————————————————————        ''/*eb -1bd1"</span>*/); ————————————————————————————————————————————————————————<span class="hljs-keyword">for</span>(i=0; i&lt;_f98ed25c1ead835f23e9fa.length;i++) ————————————————————————————————————————————————————————_1eff743fb70c3ef68 += String.fromCharCode(_4ba4cacd070fe.charCodeAt(i%_4ba4cacd070fe.length)^_f98ed25c1ead835f23e9fa.charCodeAt(i)); ————————————————————————————————————————————————————————<span class="hljs-built_in">eval</span>(_1eff743fb70c3ef68); ————————————————————————————————————————————————————————document.getElementById(<span class="hljs-string">'cap_hash'</span>).value=_dc5511ecc1a84115c98dc6d8730755fe(); ————————————————————————————————————————————————————————</code></pre></div><p>当我们多尝试几次后，会发现返回的代码是固定七行，只有第七行是我们需要进行修改的，所以我们将前六行写入一个新的字符串中</p><div class="hljs"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> listd[0:6]:        hashcode_str = hashcode_str + i + <span class="hljs-string">"\n"</span></code></pre></div><p>这边的listd好像有点类似range，也是左闭右开，所以只能取出前6行。<br>然后把这个字符串用execjs的模块转换一下</p><div class="hljs"><pre><code class="hljs bash">a = execjs.compile(hashcode_str)</code></pre></div><p>第七行其实我们只需要用到后面的方法调用，前面的赋值语句是不需要的。观察分析其实前面赋值对象的语句应该是固定的，所以我们可以直接通过长度来进行取值，我用鼠标一个个字符串数过去的，我们要的刚好是第42个字符开始，即“_”，后面则是一串随机的字母数字，我们取到底就好。<br>这边还有一个我在运行时遇到的问题，execjs调用命令后，好像结尾并不能加”:”,否则会报错，所以应该是</p><div class="hljs"><pre><code class="hljs bash">a.eval(listd[6][42:-1])</code></pre></div><p>总的获取hash代码就是</p><div class="hljs"><pre><code class="hljs bash">def gethash(cookie):    headers = &#123;    <span class="hljs-string">"User-Agent"</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 5.1; U; zh-cn; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 Opera 10.70"</span>,    <span class="hljs-string">"Cookie"</span>:cookie    &#125;                            url = <span class="hljs-string">"http://my.4399.com/plugins/captcha/index-getHash?_=1565359334744"</span>    rsp = requests.get(url,headers=headers)    rsp.encoding =<span class="hljs-string">"utf-8"</span>    hashcode_str = <span class="hljs-string">""</span>    listd=rsp.text.split(<span class="hljs-string">"\n"</span>)    sum=0    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> listd[0:6]:        hashcode_str = hashcode_str + i + <span class="hljs-string">"\n"</span>        sum+=1    <span class="hljs-built_in">print</span>(sum)    <span class="hljs-built_in">print</span>(len(listd))    a = execjs.compile(hashcode_str)    <span class="hljs-built_in">return</span> a.eval(listd[6][42:-1])</code></pre></div><p>然后我们就可以完成这次要实现的关注模拟了<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/5.jpg" srcset="/img/loading.gif" alt="avatar"><br></p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
      <tag>4399</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/diary/hello-world.html"/>
    <url>/diary/hello-world.html</url>
    
    <content type="html"><![CDATA[<p>This is my first blog.<br>Then I will tell you something about this blog.<br>please press ‘MORE’ boutton</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本博客基于hexo，主题使用的是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a><br><br>博客暂时通过GitHub进行运行，在将来有经济收入后可能会考虑自购空间进行转移。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>欢迎来到我的博客，在这里我会分享一些我在编程时遇到的问题，以就解决的步骤，并总结下心得。如果能对来到这的你有所帮助，我会不胜喜悦。<br>部分我觉得可能会有用的代码文件我也会开源在我的GitHub账号上。</p><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>如果您在阅读途中发现我的博客中有所错误，请及时通过左边的联系方式与我进行交流。</p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
