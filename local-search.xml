<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>lxml的huge_tree问题</title>
    <link href="/tutorial/lxml-huge_tree.html"/>
    <url>/tutorial/lxml-huge_tree.html</url>
    
    <content type="html"><![CDATA[<h1 id="前提背景与问题描述"><a href="#前提背景与问题描述" class="headerlink" title="前提背景与问题描述"></a>前提背景与问题描述</h1><p>因为最近在着手关于超星（学习通）的测验相关，发现里面的测验题是一层层嵌套而非并列。<br>可以看到，它是一个个class为TiMu的div嵌套而成的，我们想要读取就只有一层层的深入进去。所以按照常规想法，我采用了递归读取</p>]]></content>
    
    
    
    <tags>
      
      <tag>issue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流式下载-Python的下载进阶</title>
    <link href="/tutorial/python-spider-streamDownload.html"/>
    <url>/tutorial/python-spider-streamDownload.html</url>
    
    <content type="html"><![CDATA[<h1 id="常规下载"><a href="#常规下载" class="headerlink" title="常规下载"></a>常规下载</h1><p>近年来，Python常常与爬虫相挂钩，许多我身边的朋友听说Python甚至直接将它与爬虫划上了等号。仅仅通过几句代码，我们就可以用它来爬小说，来下载电影，来保存许多图片。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">with</span> open(<span class="hljs-string">"1.jpg"</span>,<span class="hljs-string">"wb"</span>) <span class="hljs-keyword">as</span> f :<br>rsp=requests.get(url=download_url)<br>f.write(rsp.content)<br></code></pre></div></td></tr></table></figure><p>上面这4句代码，就实现了最基础的下载功能。日常使用中我们往往只需要遵循这个框架，偶尔补上个UA，或者加个登录的cookie，总之万变不离其中。普通的下载图片肯定没什么问题的，但是当我们下载一个比较大的视频时，就会发现内存占用很大。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/streamDownload/1.png" srcset="/img/loading.gif" alt=""><br>就像上面这样，一下子就占用了解决100MB内存。这要是配置低点的电脑可就直接吃不消了啊。 </p><h1 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h1><p>试多了我们就能发现，内存占用的大小与我们下载的文件的大小基本一致。其实很好解释，requests模块的get方法，获取了所有的相关数据，并将它返回保存在rsp这个变量里。而变量又是存放在内存堆里的，自然内存就占去了一整个视频的大小。<br>那这可怎么办呢，我们对数据的读写肯定得先通过内存/缓存，再写入硬盘。既然一次性内存占用过大，那我们就分段下载，一段段下，一段段写。</p><h1 id="解决方案——流式下载"><a href="#解决方案——流式下载" class="headerlink" title="解决方案——流式下载"></a>解决方案——流式下载</h1><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">with</span> open(<span class="hljs-string">"1.mp4"</span>,<span class="hljs-string">"wb"</span>) <span class="hljs-keyword">as</span> f :<br>print(<span class="hljs-string">"正在下载..."</span>)<br>rsp=requests.get(url=download_url,stream=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> rsp.iter_content(chunk_size=<span class="hljs-number">5242880</span>) :<br>    <span class="hljs-keyword">if</span> chunk :                                          <br>        f.write(chunk)<br>print(<span class="hljs-string">"\n下载完成"</span>)<br>f.close()<br></code></pre></div></td></tr></table></figure><p>get方法中的<code>stream</code>参数，默认为 False 。指定为 True 时，只有当我们调用rsp.content时，下载才会开始。<br>而response类的<code>iter_content</code>方法，则会像我们所想的那样，获取一段content。利用循环，我们就可以实现一段段的拿，一段段的写。里面的参数<code>chunk_size</code>为单次最多拿到的数据大小（即上限，但不一定能达到），单位为字节。可以根据自己的带宽与内存大小进行调节。<br>以下是requests模块中对于该方法的注释：</p><blockquote><p>Iterates over the response data.  When stream=True is set on the request, this avoids reading the content at once into memory for large responses.  The chunk size is the number of bytes it should read into memory.  This is not necessarily the length of each item returned as decoding can take place.</p></blockquote><p>至此，我们便解决了这个令人头疼的问题，来看看效果吧。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/streamDownload/streamDownload.gif" srcset="/img/loading.gif" alt="全程内存占用不超过23MB"></p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
      <tag>流式下载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超星学习通网课分析</title>
    <link href="/tutorial/python-spider-chaoxing.html"/>
    <url>/tutorial/python-spider-chaoxing.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个刚步入大学的新生，跟全国广大的大学生一样，也受到了来自各种学习软件的迫害，“超星”就是其中之一。因为疫情及各种学校当地原因，我们学校决定于十月开学，于是也就多了一个多月的线上学习时间。通过各种腾讯课堂，钉钉，腾讯会议，学习通等等进行网络授课。期间也遇到了各种宣传代刷网课的，本着以锻炼自己爬虫实力为目的，在闲暇之余开始研究超星的网络协议（主要上面有好多学习视频任务需要完成）。<br>在此也声明一下，本教程仅供学习，请勿用于非法商业用途。刷课一时爽，但也不要忘了掌握好知识，杜绝挂科。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h3><p>超星平台的旧版登录是需要验证码的<img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/1.png" srcset="/img/loading.gif" alt="old_sign_in"><br>然而通过新版进去却不需要直接输入验证码（尚未测试过多次密码错误后是否会出现验证码）<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/2.png" srcset="/img/loading.gif" alt="new_sign_in"><br>本着能简化就简化的理念（主要是懒），我们直接抓取这个新版的登录页面。<a href="https://passport2.chaoxing.com/login?fid=&newversion=true&refer=http%3A%2F%2Fi.chaoxing.com" target="_blank" rel="noopener">https://passport2.chaoxing.com/login?fid=&amp;newversion=true&amp;refer=http%3A%2F%2Fi.chaoxing.com</a><br>尝试登录，老套路了，避免登录成功后跳转出现很多包，我们直接输入错误的登录信息。结果很符合我们的预期，只多出了一个包<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/3.png" srcset="/img/loading.gif" alt="post_sign_in"><br>查看预览，正好是提示我们的“用户名或密码错误”，我们查看提交的表单，一个个来分析。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/4.png" srcset="/img/loading.gif" alt="post_form_sign_in"></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">fid:</span> <span class="hljs-number">-1</span><br><span class="hljs-attr">uname:</span> <span class="hljs-number">11011110010</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">bGl1eXVuZno=</span><br><span class="hljs-attr">refer:</span> <span class="hljs-string">http%3A%2F%2Fi.chaoxing.com</span><br><span class="hljs-attr">t:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>不管fid，-1应该是一个常量。uname正好是我们输入的手机号。password结尾有“=”，我们大胆猜测是base64编码<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/5.png" srcset="/img/loading.gif" alt="post_form_password"><br>正好是我们输入的密码，那么password也搞定了。t是一个布尔值，也作为常量，refer我就不多解释了，也把它作为常量吧。</p><h3 id="代码撰写"><a href="#代码撰写" class="headerlink" title="代码撰写"></a>代码撰写</h3><p>照着我们的分析，我们尝试利用python代码模拟我们的登录操作。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests,base64<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sign_in</span><span class="hljs-params">(username:str,password:str)</span>:</span><br>    url=<span class="hljs-string">"https://passport2.chaoxing.com/fanyalogin"</span><br>    headers=&#123;<br>        <span class="hljs-string">'Accept'</span>:<span class="hljs-string">'application/json, text/javascript, */*; q=0.01'</span>,<br>        <span class="hljs-string">'Accept-Encoding'</span>:<span class="hljs-string">'gzip, deflate, br'</span>,<br>        <span class="hljs-string">'Accept-Language'</span>:<span class="hljs-string">'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6'</span>,<br>        <span class="hljs-string">'Connection'</span>:<span class="hljs-string">'keep-alive'</span>,<br>        <span class="hljs-string">'Content-Length'</span>:<span class="hljs-string">'95'</span>,<br>        <span class="hljs-string">'Content-Type'</span>:<span class="hljs-string">'application/x-www-form-urlencoded; charset=UTF-8'</span>,<br>        <span class="hljs-string">'Cookie'</span>:<span class="hljs-string">''</span>,<br>        <span class="hljs-string">'Host'</span>:<span class="hljs-string">'passport2.chaoxing.com'</span>,<br>        <span class="hljs-string">'Origin'</span>:<span class="hljs-string">'https://passport2.chaoxing.com'</span>,<br>        <span class="hljs-string">'Referer'</span>:<span class="hljs-string">'https://passport2.chaoxing.com/login?fid=&amp;newversion=true&amp;refer=http%3A%2F%2Fi.chaoxing.com'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Dest'</span>:<span class="hljs-string">'empty'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Mode'</span>:<span class="hljs-string">'cors'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Site'</span>:<span class="hljs-string">'same-origin'</span>,<br>        <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.193 Safari/537.36 Edg/86.0.622.68'</span>,<br>        <span class="hljs-string">'X-Requested-With'</span>:<span class="hljs-string">'XMLHttpRequest'</span><br>    &#125;<br>    data=<span class="hljs-string">"fid=-1&amp;uname=&#123;0&#125;&amp;password=&#123;1&#125;&amp;refer=http%253A%252F%252Fi.chaoxing.com&amp;t=true"</span>.format(username,base64.b64encode(password.encode()).decode())<br>    print(base64.b64encode(password.encode()).decode())<br>    rsp=requests.post(url=url,headers=headers,data=data)<br>    print(rsp.text,rsp.status_code)<br></code></pre></div></td></tr></table></figure><p>调试一下，我这里把私密信息打了马赛克，但不影响看出成功。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/6.png" srcset="/img/loading.gif" alt="function_sign_in"><br>为了后续内容的顺利进行，这边我们再把登录成功的cookie记录下来</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">cookieStr = <span class="hljs-string">''</span> <br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> rsp.cookies:<br>        cookieStr = cookieStr + item.name + <span class="hljs-string">'='</span> + item.value + <span class="hljs-string">';'</span><br>    print(cookieStr)<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/7.png" srcset="/img/loading.gif" alt="cookie_sign_in"></p><h2 id="获取课程"><a href="#获取课程" class="headerlink" title="获取课程"></a>获取课程</h2><h3 id="网页分析-1"><a href="#网页分析-1" class="headerlink" title="网页分析"></a>网页分析</h3><h4 id="抓取课程信息"><a href="#抓取课程信息" class="headerlink" title="抓取课程信息"></a>抓取课程信息</h4><p>因为不能确定个人空间里面的课程内容是通过json获取数据在本地渲染的还是服务器就渲染好后传给用户的。所以我们还是抓包看看。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/8.png" srcset="/img/loading.gif" alt="post_zone"><br>查找我们的课程，发现在源代码里并没有找到，所以大概率是第一种可能，所以我们尝试往下找传递课程数据的json包。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/9.png" srcset="/img/loading.gif" alt="post_zone_true"><br>可以看到，成功找到了我们要的数据包，可惜并不是我们想要的json包，但问题也不大，只是增加了我们代码解析时的复杂度。然后具体看我们抓到的这个课程数据包，请求方式为get，唯一麻烦的是参数s<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/10.png" srcset="/img/loading.gif" alt="get_course"><br>这个s参数肯定不会无故出现，所以我们往前寻找有没有前面就给出了这个地址的，我们从最前面找，看看最初的那个空间地址包里面有没有这个地址。<br>然而正当我打算尝试时，我发现把s参数去掉了一样可以正常访问我们的课程数据<code>http://mooc1-2.chaoxing.com/visit/courses</code><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/11.png" srcset="/img/loading.gif" alt="get_course_withNoS"><br>那么为了尽可能简化，我们还是能偷懒就偷懒。<br>然后我们跳到代码阶段，先试试前面的cookie能否正常使用，并且读取到这个课程网页的信息。</p><p><a href="#尝试cookie与读取课程信息">点我跳转</a></p><h4 id="解析课程信息"><a href="#解析课程信息" class="headerlink" title="解析课程信息"></a>解析课程信息</h4><p>因为课程数据已经在<a href="http://mooc1-2.chaoxing.com/visit/courses" target="_blank" rel="noopener">http://mooc1-2.chaoxing.com/visit/courses</a> 这个包里给出了，但它又不是一个json，所以我们把它作为一个单独的网页来进行结构分析。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/13.png" srcset="/img/loading.gif" alt="post_deal_data"><br>可以看到课程是一个ul结构下的多个li构成的。我们需要的里面每个课程的<code>courseId</code> <code>classId</code>与对应跳转的url(因为url里包含了courseid与classid，所以我们可以选择一是通过xpath先储存并关联url与对应的课程id；亦或是只获取url，后面再从url里读取参数courseid，classid等)。选中我们要的元素，右键复制xpath。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/14.png" srcset="/img/loading.gif" alt="html_xpath"><br>这里我选择了第二种方案，只获取url，courseid从url中读取。我们继续跳到代码步骤。 </p><p><a href="#课程xpath书写与重定向问题">点我跳转</a> </p><h3 id="代码撰写-1"><a href="#代码撰写-1" class="headerlink" title="代码撰写"></a>代码撰写</h3><h4 id="尝试cookie与读取课程信息"><a href="#尝试cookie与读取课程信息" class="headerlink" title="尝试cookie与读取课程信息"></a>尝试cookie与读取课程信息</h4><p>将登录获取到的cookie合并成cookiestr后传入获取课程信息的函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_course</span><span class="hljs-params">(cookie:str)</span>:</span><br>    course_headers=&#123;<br>        <span class="hljs-string">'Cookie'</span>:cookie,<br>        <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36 Edg/85.0.564.51'</span><br>    &#125;<br>    course_rsp=requests.get(url=<span class="hljs-string">"http://mooc1-2.chaoxing.com/visit/courses"</span>,headers=course_headers)<br>    print(course_rsp.text)<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/12.png" srcset="/img/loading.gif" alt="funtion_get_course"><br>可以看到，成功获取到了课程信息，同时也印证了我们前面登录函数的可行性。<br>之后回到网页，我们继续分析网页结构，使python可以解析我们的所有课程及相关信息。  </p><p><a href="#解析课程信息">点我跳转</a>  </p><h4 id="课程xpath书写与重定向问题"><a href="#课程xpath书写与重定向问题" class="headerlink" title="课程xpath书写与重定向问题"></a>课程xpath书写与重定向问题</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_course</span><span class="hljs-params">(cookie:str)</span>:</span><br>    course_headers=&#123;<br>        <span class="hljs-string">'Cookie'</span>:cookie,<br>        <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36 Edg/85.0.564.51'</span><br>    &#125;<br>    course_rsp=requests.get(url=<span class="hljs-string">"http://mooc1-2.chaoxing.com/visit/courses"</span>,headers=course_headers)<br>    <span class="hljs-keyword">if</span> course_rsp.status_code==<span class="hljs-number">200</span>:<br>        <span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br>        class_HTML=etree.HTML(course_rsp.text)<br>        print(<span class="hljs-string">"处理成功，您当前已开启的课程如下：\n"</span>)<br>        i=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">global</span> course_dict<br>        course_dict=&#123;&#125;<br>        <span class="hljs-keyword">for</span> class_item <span class="hljs-keyword">in</span> class_HTML.xpath(<span class="hljs-string">"/html/body/div/div[2]/div[3]/ul/li[@class='courseItem curFile']"</span>):<br>            <span class="hljs-comment">#courseid=class_item.xpath("./input[@name='courseId']/@value")[0]</span><br>            <span class="hljs-comment">#classid=class_item.xpath("./input[@name='classId']/@value")[0]</span><br>            <span class="hljs-keyword">try</span>:              <br>                class_item_name=class_item.xpath(<span class="hljs-string">"./div[2]/h3/a/@title"</span>)[<span class="hljs-number">0</span>]<br>                <span class="hljs-comment">#等待开课的课程由于尚未对应链接，所有缺少a标签。</span><br>                i+=<span class="hljs-number">1</span><br>                print(class_item_name)<br>                course_dict[i]=[class_item_name,<span class="hljs-string">"https://mooc1-2.chaoxing.com&#123;&#125;"</span>.format(class_item.xpath(<span class="hljs-string">"./div[1]/a[1]/@href"</span>)[<span class="hljs-number">0</span>])]<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br>        print(<span class="hljs-string">"———————————————————————————————————"</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">"error:课程处理失败"</span>)<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/15.png" srcset="/img/loading.gif" alt="code_xpath"><br>课程读取成功了，课程的url与name也作为list被我们关联储存到了course_dict这个dict中(为了使序号与课程进行关联，并且保持有序性)<br>课程获取完后我们就可以开始针对单个课程，读取里面的待完成视频任务添加到程序任务里。然而，仔细观察我们从html里获取到的url<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/16.png" srcset="/img/loading.gif" alt="before_url"><br>与我们手动访问课程获取的url<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/17.png" srcset="/img/loading.gif" alt="after_url"><br>发现两者并不相同，我们尝试访问html里的url，然后抓包看发生了什么<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/18.png" srcset="/img/loading.gif" alt="status_302"><br>不出所料，果然url发生了302重定向。<br>本来requests库是会识别302并自动跟随跳转的，但不知道为什么我这里出现了错误，并未跟随跳转，甚至让我一度怀疑问题出在了cookie上。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deal_course</span><span class="hljs-params">(url:str)</span>:</span><br>    course_302_url=url<br>    course_headers=&#123;<br>        <span class="hljs-string">'Accept'</span>:<span class="hljs-string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,<br>        <span class="hljs-string">'Accept-Encoding'</span>:<span class="hljs-string">'gzip, deflate, br'</span>,<br>        <span class="hljs-string">'Accept-Language'</span>:<span class="hljs-string">'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6'</span>,<br>        <span class="hljs-string">'Connection'</span>:<span class="hljs-string">'keep-alive'</span>,<br>        <span class="hljs-string">'Cookie'</span>:cookieStr,<br>        <span class="hljs-string">'Host'</span>:<span class="hljs-string">'mooc1-2.chaoxing.com'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Dest'</span>:<span class="hljs-string">'document'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Mode'</span>:<span class="hljs-string">'navigate'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Site'</span>:<span class="hljs-string">'none'</span>,<br>        <span class="hljs-string">'Upgrade-Insecure-Requests'</span>:<span class="hljs-string">'1'</span>,<br>        <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36 Edg/85.0.564.51'</span><br>    &#125;<br>    <span class="hljs-comment">#302跳转，requests库默认追踪headers里的location进行跳转，使用allow_redirects=False</span><br>    course_302_rsp=requests.get(url=course_302_url,headers=course_headers,allow_redirects=<span class="hljs-literal">False</span>)<br>    new_url=course_302_rsp.headers[<span class="hljs-string">'Location'</span>]<br></code></pre></div></td></tr></table></figure><p>这样，只需要将html里获取到的url传入到这个函数里，new_url就是我们要的真正的课程地址了。<br>真正的课程地址获取完成了，接下来我们继续回到网络分析，分析单个课程中我们需要完成的任务。 </p><h2 id="课程任务"><a href="#课程任务" class="headerlink" title="课程任务"></a>课程任务</h2><h3 id="分析网页"><a href="#分析网页" class="headerlink" title="分析网页"></a>分析网页</h3><p>任意进入到一个课程中，通过观察可以发现：白色无内容的——没有任务；橙色有数字的——数字代表该章节的任务数；绿色勾勾的——有任务但已完成了的。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/19.png" srcset="/img/loading.gif" alt="misson_html"><br>刷新一下，发现该课程地址就已经给出了相关的章节信息，即在服务端已经渲染好了再传输到用户端，并没有额外的json数据包。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/20.png" srcset="/img/loading.gif" alt="post_course_html"><br>所以我们直接右键“检查”，查看网页元素。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/21.png" srcset="/img/loading.gif" alt="course_html_element"><br>找规律可以发现，正常的没有课程任务的，em元素的class是“blank”，如果有任务但已完成则是“openlock”，如果有任务但未完成则class为“orange”，且其text为任务数。<br>知道了这个，我们就好写了，只需要判断em元素class属性是orange的，并把它对应的url写入我们的任务列表里。所以接下来回到代码环节  </p><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>章节信息判断与未完成任务读取<br>通过上面的分析，以及课程信息url的获取，将其传入的requests，获取源代码后即可进行判断处理。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_misson</span><span class="hljs-params">(url:str)</span>:</span><br>    course_headers=&#123;<br>        <span class="hljs-string">'Accept'</span>:<span class="hljs-string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span>,<br>        <span class="hljs-string">'Accept-Encoding'</span>:<span class="hljs-string">'gzip, deflate, br'</span>,<br>        <span class="hljs-string">'Accept-Language'</span>:<span class="hljs-string">'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6'</span>,<br>        <span class="hljs-string">'Connection'</span>:<span class="hljs-string">'keep-alive'</span>,<br>        <span class="hljs-string">'Cookie'</span>:cookieStr,<br>        <span class="hljs-string">'Host'</span>:<span class="hljs-string">'mooc1-2.chaoxing.com'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Dest'</span>:<span class="hljs-string">'document'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Mode'</span>:<span class="hljs-string">'navigate'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Site'</span>:<span class="hljs-string">'none'</span>,<br>        <span class="hljs-string">'Upgrade-Insecure-Requests'</span>:<span class="hljs-string">'1'</span>,<br>        <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36 Edg/85.0.564.51'</span><br>    &#125;<br>    course_rsp=requests.get(url=url,headers=course_headers)<br>    course_HTML=etree.HTML(course_rsp.text)<br>    <span class="hljs-comment">#为防止账号没有课程或没有班级，需要后期在xpath获取加入try，以防报错</span><br>    chapter_mission=[]<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> course_unit <span class="hljs-keyword">in</span> course_HTML.xpath(<span class="hljs-string">"/html/body/div[5]/div[1]/div[2]/div[3]/div"</span>):<br>            print(course_unit.xpath(<span class="hljs-string">"./h2/a/@title"</span>)[<span class="hljs-number">0</span>])<br>            <span class="hljs-keyword">for</span> chapter_item <span class="hljs-keyword">in</span> course_unit.xpath(<span class="hljs-string">"./div"</span>):<br>                chapter_status=chapter_item.xpath(<span class="hljs-string">"./h3/span[@class='icon']/em/@class"</span>)[<span class="hljs-number">0</span>]<br>                <span class="hljs-keyword">if</span> chapter_status == <span class="hljs-string">"orange"</span>:<br>                    print(<span class="hljs-string">"----"</span>,chapter_item.xpath(<span class="hljs-string">"./h3/span[@class='articlename']/a/@title"</span>)[<span class="hljs-number">0</span>],<span class="hljs-string">"      "</span>,chapter_item.xpath(<span class="hljs-string">"./h3/span[@class='icon']/em/text()"</span>)[<span class="hljs-number">0</span>])<br>                    chapter_mission.append(<span class="hljs-string">"https://mooc1-2.chaoxing.com&#123;&#125;"</span>.format(chapter_item.xpath(<span class="hljs-string">"./h3/span[@class='articlename']/a/@href"</span>)[<span class="hljs-number">0</span>]))<br>                <span class="hljs-keyword">else</span>:    <br>                    print(<span class="hljs-string">"----"</span>,chapter_item.xpath(<span class="hljs-string">"./h3/span[@class='articlename']/a/@title"</span>)[<span class="hljs-number">0</span>],<span class="hljs-string">"      "</span>,chapter_item.xpath(<span class="hljs-string">"./h3/span[@class='icon']/em/@class"</span>)[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    print(<span class="hljs-string">"课程读取完成，共有%d个章节可一键完成"</span>%len(chapter_mission))<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/22.png" srcset="/img/loading.gif" alt="function_add_misson"></p><h2 id="视频任务点"><a href="#视频任务点" class="headerlink" title="视频任务点"></a>视频任务点</h2><p>因为要实现的是一键刷课程视频，所以接下来我们要读取的是章节任务里面的视频任务点。</p><h3 id="网页分析-2"><a href="#网页分析-2" class="headerlink" title="网页分析"></a>网页分析</h3><p>还是老样子，先抓一下包。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/23.png" srcset="/img/loading.gif" alt="post_video_misson"><br>可以从预览里看出，章节网页似乎并没有完全渲染完成后再传输给我们。通过查看响应里面的代码，我们也验证了猜想，并未找到有关的视频数据。所以我们尝试往下寻找包含视频信息的json包或者html网页。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/24.png" srcset="/img/loading.gif" alt="post_video"><br>最后，在这个“/knowledge/cards”里的包里找到了我们要的数据，可惜它也不是json，而是一个html，里面有js代码。所以我们还得自己提取代码，并转化成python可识别的内容。这边的分析还是比较麻烦的，但并不算难，只能说不熟练的话需要多试试。这个就请自己尝试看看吧，这边就不给出具体分析过程了（因为自己也想不起来了，也不想再分析一遍，懒）。不过如果实在有问题的话也可以联系我，和我交流交流。那我们就直接进入代码环节然后给出代码。<br>我们顺便分析一下这些视频数据代表的内容。<br>“isPassed”是任务点是否已完成，true为已完成，false为未完成，所以我们可以通过判断它的属性来直接判断是否需要对该视频进行处理。<br>“type”: “video”是类型为视频，也是我们判断是否要添加到任务列表的一个条件（因为我们要实现的只有刷超星视频），其他还有可能出现ppt这种。<br>其他其实通过名字也都能知道是什么，主要还是要看后面我们需要用到什么属性。</p><h3 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h3><p>为了把js代码提取出来并变成python中的dict或list，我这里用到了正则表达式，取出我们要的内容。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deal_misson</span><span class="hljs-params">(missons:list,class_cpi:str)</span>:</span>  <br>    <span class="hljs-keyword">for</span> chapter_mission_item <span class="hljs-keyword">in</span> missons:<br>        result = parse.urlparse(chapter_mission_item)<br>        chapter_data=parse.parse_qs(result.query)<br>        print(chapter_data)<br>        medias_url=<span class="hljs-string">"https://mooc1-2.chaoxing.com/knowledge/cards?clazzid=&#123;0&#125;&amp;courseid=&#123;1&#125;&amp;knowledgeid=&#123;2&#125;&amp;num=0&amp;ut=s&amp;cpi=&#123;3&#125;&amp;v=20160407-1"</span>.format(chapter_data.get(<span class="hljs-string">'clazzid'</span>)[<span class="hljs-number">0</span>],chapter_data.get(<span class="hljs-string">'courseId'</span>)[<span class="hljs-number">0</span>],chapter_data.get(<span class="hljs-string">'chapterId'</span>)[<span class="hljs-number">0</span>],class_cpi)<br>        class_headers=&#123;<br>        <span class="hljs-string">'Cookie'</span>:cookieStr,<br>        <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36 Edg/85.0.564.51'</span><br>        &#125;<br>        medias_rsp=requests.get(url=medias_url,headers=class_headers)<br>        medias_HTML=etree.HTML(medias_rsp.text)<br>        medias_text=medias_HTML.xpath(<span class="hljs-string">"//script[1]/text()"</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">import</span> re,json<br>        pattern = re.compile(<span class="hljs-string">r'attachments":([\s\S]*),"defaults"'</span>) <br>        re_result=re.findall(pattern,medias_text)[<span class="hljs-number">0</span>]<br>        reportUrl=re.findall(<span class="hljs-string">r'reportUrl":([\s\S]*),"chapterCapture"'</span>,medias_text)[<span class="hljs-number">0</span>]<br>        reportUrl=reportUrl.replace(<span class="hljs-string">"\""</span>,<span class="hljs-string">""</span>)<br>        result_json=json.loads(re_result)<br></code></pre></div></td></tr></table></figure><p>这里传入的missons是每个章节的链接构成的一个list，至于class_cpi是课程的cpi信息，每个课程中的所有章节中的所有视频都共用这个cpi属性，而这个是后面完成视频要用到的，针对我们现在判断视频任务并用不到。<strong>result_json</strong>即是我们从网页代码中提取出的json。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/25.png" srcset="/img/loading.gif" alt="misson_debug"><br>可以看到，调试成功了，而且是很完美的json格式，loads我们可以用list的操作方式轻松的调用其中的数据信息。<br>章节中的视频信息我们也处理完成了，到此我们的准备工作已经都完成了。<strong>账号登录——判断课程信息——判断课程中的章节任务——判断章节里面的视频任务</strong>，最后一步就是完成章节里的视频任务了，也是我们最后的大头。</p><h2 id="任务完成解析"><a href="#任务完成解析" class="headerlink" title="任务完成解析"></a>任务完成解析</h2><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><p>打开“开发者选项”，进行抓包，然后播放视频。出现了两个包<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/26.png" srcset="/img/loading.gif" alt="post_video_status"><br>第一个是视频的包，用于向服务器请求视频数据，从其中的type，以及一些其他的headers都能看出来。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/27.png" srcset="/img/loading.gif" alt="post_video_first"><br>第二个包，就是我们要的用来完成任务的包了。它传输的是你观看的数据，返回的isPassed来说明你的任务是否完成了。因为我们只是播放了一下，所以任务当然没能完成，所以返回的数据是{“isPassed”:false}。<br>然后我们等视频放完，即将任务点完成，看它会发送什么包，与前面这个包有什么区别。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/28.png" srcset="/img/loading.gif" alt="post_video_finish"></p><p>可以看出主要区别就在这个playingTime，翻译下来也很好理解，应该就是我们播放了的时间。只要这个时间等于视频的总长度，那么就算我们就完成了。接下来我们分析下提交的整个表单。 </p><table><thead><tr><th>key</th><th>含义</th><th>来源</th></tr></thead><tbody><tr><td>clazzId</td><td>章节ID</td><td>单个章节的url里</td></tr><tr><td>playingTime</td><td>视频播放的时间</td><td>自己修改，通过读取视频的长度信息</td></tr><tr><td>duration</td><td>时间</td><td>与playingtime同步，都为视频的总时长</td></tr><tr><td>clipTime</td><td>起止时间？</td><td>“0_”加上总时长，即与前面两个参数一样，但在前方加上”0_”</td></tr><tr><td>objectId</td><td>视频的“objectId”属性</td><td>由<a href="#视频任务点">视频任务点</a>中的所有视频信息“result_json” 里面的单个视频数据中给出。</td></tr><tr><td>otherInfo</td><td>视频的“otherInfo”属性</td><td>由<a href="#视频任务点">视频任务点</a>中的所有视频信息“result_json” 里面的单个视频数据中给出。</td></tr><tr><td>jobid</td><td>视频的“jobid”属性</td><td>由<a href="#视频任务点">视频任务点</a>中的所有视频信息“result_json” 里面的单个视频数据中给出。</td></tr><tr><td>userid</td><td>用户id信息</td><td>由登录时获取的cookie里获取</td></tr><tr><td>isdrag</td><td>视频状态信息，0：默认；3：播放；2：暂停；4：视频结束。</td><td>我们要用的是状态4，将其作为常量</td></tr><tr><td>view</td><td>终端情况？</td><td>值为”pc”，我们将其作为常量不修改它</td></tr><tr><td>enc</td><td>是其他表单所有数据经过算法计算后得出的数据校验码</td><td>全篇的最难点，见后面分析</td></tr><tr><td>rt</td><td>不清楚</td><td>将值0.9作为常量</td></tr><tr><td>dtype</td><td>任务类型</td><td>因为我们要实现的功能仅有视频，所以将值Video作为常量</td></tr><tr><td>_t</td><td>时间戳</td><td>可以添加实时时间戳，也可以沿用，服务端不会进行校验</td></tr></tbody></table><p>以下我将给出以上部分参数含义及来源的代码依据。</p><h4 id="clipTime"><a href="#clipTime" class="headerlink" title="clipTime"></a>clipTime</h4><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/29.png" srcset="/img/loading.gif" alt="post_clipTime"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">clipTime = (params.startTime || <span class="hljs-string">"0"</span>) + <span class="hljs-string">"_"</span> + (params.endTime || params.duration);<br></code></pre></div></td></tr></table></figure><p>以上是源代码，不难看懂，clipTime的值是 起始时间或”0” + “_”  + 终止时间或duration 。</p><h4 id="isdrag"><a href="#isdrag" class="headerlink" title="isdrag"></a>isdrag</h4><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/30.png" srcset="/img/loading.gif" alt="post_isdrag"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isdrag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">switch</span> (evt) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">"play"</span>:<br>    isdrag = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">"pause"</span>:<br>    isdrag = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">"ended"</span>:<br>    isdrag = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">break</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>因为我们要完成任务，自然是视频播放完结束后发送的包，所以为ended，所以我们用“4”作为常量值。</p><h4 id="rt"><a href="#rt" class="headerlink" title="rt"></a>rt</h4><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/31.png" srcset="/img/loading.gif" alt="post_rt"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rt = data ? (data.rt ? data.rt : <span class="hljs-number">0.9</span>) : <span class="hljs-number">0.9</span>;<br></code></pre></div></td></tr></table></figure><p>没学过js的我也不太清楚这段话的具体作用，不过我们把“0.9”作为常量传输不会有任何异常。<br>这里有个小细节，就是当我们全站检索“rt”时因为字符数较少，会出现较多的结果（因为很多函数或变量里都会包含这两个字符，所以我们搜索 rt 的定义语句——“var rt”，即可减少结果。</p><h4 id="enc"><a href="#enc" class="headerlink" title="enc"></a>enc</h4><p>全文的最难点，以上所有数据的校验码。以下将给出我个人尝试破解的详细思路。<br>首先我选择全站检索enc，尝试找到它的由来。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/32.png" srcset="/img/loading.gif" alt="post_enc_1"><br>可以看到，出现了很多的数据（15个文件共77行匹配），所以为了缩小范围，我尝试跟上面的rt一样操作，查询enc的赋值语句。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/33.png" srcset="/img/loading.gif" alt="post_enc_2"><br>很有效果，结果只有4个文件5行匹配。而如图红色圈起来的代码，虽然都对enc进行了赋值，但都不是我们要的语句。我们一个个手动排除，最后我锁定了 <a href="https://mooc1-2.chaoxing.com/ananas/videojs-ext/videojs-ext.min.js" target="_blank" rel="noopener">https://mooc1-2.chaoxing.com/ananas/videojs-ext/videojs-ext.min.js</a> 这个文件，细心的朋友可能已经发现了，就是我们刚才找clipTime的那个地方。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sendLog_ = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">player, isdrag, currentTimeSec, callback</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!params.reportUrl) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (params.isFiled == <span class="hljs-number">1</span> || params.state == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> format = <span class="hljs-string">"[&#123;0&#125;][&#123;1&#125;][&#123;2&#125;][&#123;3&#125;][&#123;4&#125;][&#123;5&#125;][&#123;6&#125;][&#123;7&#125;]"</span><br>      , clipTime = (params.startTime || <span class="hljs-string">"0"</span>) + <span class="hljs-string">"_"</span> + (params.endTime || params.duration);<br>    <span class="hljs-keyword">var</span> enc = Ext.String.format(format, params.clazzId, params.userid, params.jobid || <span class="hljs-string">""</span>, params.objectId, currentTimeSec * <span class="hljs-number">1000</span>, <span class="hljs-string">"d_yHJ!$pdA~5"</span>, params.duration * <span class="hljs-number">1000</span>, clipTime);<br>    <span class="hljs-keyword">var</span> rurl = [params.reportUrl, <span class="hljs-string">"/"</span>, params.dtoken, <span class="hljs-string">"?clazzId="</span>, params.clazzId, <span class="hljs-string">"&amp;playingTime="</span>, currentTimeSec, <span class="hljs-string">"&amp;duration="</span>, params.duration, <span class="hljs-string">"&amp;clipTime="</span>, clipTime, <span class="hljs-string">"&amp;objectId="</span>, params.objectId, <span class="hljs-string">"&amp;otherInfo="</span>, params.otherInfo, <span class="hljs-string">"&amp;jobid="</span>, params.jobid, <span class="hljs-string">"&amp;userid="</span>, params.userid, <span class="hljs-string">"&amp;isdrag="</span>, isdrag, <span class="hljs-string">"&amp;view=pc"</span>, <span class="hljs-string">"&amp;enc="</span>, md5(enc), <span class="hljs-string">"&amp;rt="</span>, params.rt, <span class="hljs-string">"&amp;dtype=Video"</span>, <span class="hljs-string">"&amp;_t="</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()].join(<span class="hljs-string">""</span>);<br>    logFunc(player, rurl, callback)<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>把里面关于enc的代码提取出来</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> format = <span class="hljs-string">"[&#123;0&#125;][&#123;1&#125;][&#123;2&#125;][&#123;3&#125;][&#123;4&#125;][&#123;5&#125;][&#123;6&#125;][&#123;7&#125;]"</span><br><br><span class="hljs-keyword">var</span> enc = Ext.String.format(format, params.clazzId, params.userid, params.jobid || <span class="hljs-string">""</span>, params.objectId, currentTimeSec * <span class="hljs-number">1000</span>, <span class="hljs-string">"d_yHJ!$pdA~5"</span>, params.duration * <span class="hljs-number">1000</span>, clipTime);<br><br><span class="hljs-string">"&amp;enc="</span>, md5(enc)<br></code></pre></div></td></tr></table></figure><p>大致意思就是令</p><blockquote><p>enc=[clazzId][userid][jobid][objectId][currentTimeSec * 1000][“d_yHJ!$pdA~5”][duration * 1000][clipTime]  </p></blockquote><p>然后再将取enc的md5，作为表单的校验码。这里面的参数多是前面已经分析过了的，只是中间多了一个字符串常量 &quot;d_yHJ!$pdA~5&quot; 。还有一个可能不太清楚的就是currentTimeSec了。<br>我们设置断点，一边看看这个currentTimeSec到底是啥，顺便验证下我们前面的是否正确。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/34.png" srcset="/img/loading.gif" alt="html_pause"><br>在这里设置断点，然后我们刷新后重新播放视频。将鼠标移到enc处，即可看到enc的值预览。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/picgo_pictures/chaoxing/35.png" srcset="/img/loading.gif" alt="html_enc">这里因为隐私问题做打码处理，可以自己尝试，和我们前面说的基本无二。而currentTimeSec我们也发现了，currentTimeSec * 1000跟 duration * 1000 的值一模一样。<br>截止目前，数据包里面的所有参数我们已经都弄明白了，接下来就是写代码就好了。</p><h3 id="代码书写"><a href="#代码书写" class="headerlink" title="代码书写"></a>代码书写</h3><p>以下是enc的返回函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode_enc</span><span class="hljs-params">(clazzid:str,duration:int,objectId:str,otherinfo:str,jobid:str,userid:str)</span>:</span><br>    <span class="hljs-keyword">import</span> hashlib<br>    data=<span class="hljs-string">"[&#123;0&#125;][&#123;1&#125;][&#123;2&#125;][&#123;3&#125;][&#123;4&#125;][&#123;5&#125;][&#123;6&#125;][0_&#123;7&#125;]"</span>.format(clazzid,userid,jobid,objectId,duration*<span class="hljs-number">1000</span>,<span class="hljs-string">"d_yHJ!$pdA~5"</span>,duration*<span class="hljs-number">1000</span>,duration)<br>    print(data)<br>    <span class="hljs-keyword">return</span> hashlib.md5(data.encode()).hexdigest()<br></code></pre></div></td></tr></table></figure><p>然后是数据包的代码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> video_item.get(<span class="hljs-string">"isPassed"</span>) == <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">if</span> video_item.get(<span class="hljs-string">"type"</span>) == <span class="hljs-string">"video"</span>:<br>        objectId=video_item.get(<span class="hljs-string">"objectId"</span>)<br>        otherInfo=video_item.get(<span class="hljs-string">"otherInfo"</span>)<br>        jobid=video_item.get(<span class="hljs-string">"jobid"</span>)<br>        name=video_item.get(<span class="hljs-string">'property'</span>).get(<span class="hljs-string">'name'</span>)<br>        status_url=<span class="hljs-string">"https://mooc1-1.chaoxing.com/ananas/status/&#123;&#125;?k=&amp;flag=normal&amp;_dc=1600850935908"</span>.format(objectId)<br>        status_rsp=requests.get(url=status_url,headers=class_headers)<br>        status_json=json.loads(status_rsp.text)<br>        duration=status_json.get(<span class="hljs-string">'duration'</span>)<br>        dtoken=status_json.get(<span class="hljs-string">'dtoken'</span>)<br>        print(objectId,otherInfo,jobid,uid,name,duration,reportUrl)<br>        multimedia_headers=&#123;<br>            <span class="hljs-string">'Accept'</span>:<span class="hljs-string">'*/*'</span>,<br>            <span class="hljs-string">'Accept-Encoding'</span>:<span class="hljs-string">'gzip, deflate, br'</span>,<br>            <span class="hljs-string">'Accept-Language'</span>:<span class="hljs-string">'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6'</span>,<br>            <span class="hljs-string">'Connection'</span>:<span class="hljs-string">'keep-alive'</span>,<br>            <span class="hljs-string">'Content-Type'</span>:<span class="hljs-string">'application/json'</span>,<br>            <span class="hljs-string">'Cookie'</span>:cookieStr,<br>            <span class="hljs-string">'Host'</span>:<span class="hljs-string">'mooc1-1.chaoxing.com'</span>,<br>            <span class="hljs-string">'Referer'</span>:<span class="hljs-string">'https://mooc1-1.chaoxing.com/ananas/modules/video/index.html?v=2020-0907-1546'</span>,<br>            <span class="hljs-string">'Sec-Fetch-Dest'</span>:<span class="hljs-string">'empty'</span>,<br>            <span class="hljs-string">'Sec-Fetch-Mode'</span>:<span class="hljs-string">'cors'</span>,<br>            <span class="hljs-string">'Sec-Fetch-Site'</span>:<span class="hljs-string">'same-origin'</span>,<br>            <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36 Edg/85.0.564.51'</span><br>        &#125;<br>        <span class="hljs-keyword">import</span> time<br>        elses=<span class="hljs-string">"/&#123;0&#125;?clazzId=&#123;1&#125;&amp;playingTime=&#123;2&#125;&amp;duration=&#123;2&#125;&amp;clipTime=0_&#123;2&#125;&amp;objectId=&#123;3&#125;&amp;otherInfo=&#123;4&#125;&amp;jobid=&#123;5&#125;&amp;userid=&#123;6&#125;&amp;isdrag=4&amp;view=pc&amp;enc=&#123;7&#125;&amp;rt=0.9&amp;dtype=Video&amp;_t=&#123;8&#125;"</span>.format(dtoken,chapter_data.get(<span class="hljs-string">'clazzid'</span>)[<span class="hljs-number">0</span>],duration,objectId,otherInfo,jobid,uid,encode_enc(chapter_data.get(<span class="hljs-string">'clazzid'</span>)[<span class="hljs-number">0</span>],duration,objectId,otherInfo,jobid,uid),int(time.time()*<span class="hljs-number">1000</span>))<br>        reportUrl_item=reportUrl+str(elses)<br>        print(reportUrl_item)<br>        multimedia_rsp=requests.get(url=reportUrl_item,headers=multimedia_headers)<br>        print(multimedia_rsp.text)<br></code></pre></div></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>截止至此，已经是2020/11/20 22:59:16 ，这篇文章还是断断续续写了很久。里面我尽可能展示了我的思路。每一个功能的实现都存在一定的难度性，所以还是很值得记录与分享的。如果你仍有什么疑问，或者我哪里表达较为含糊，您都可以在下方直接评论，或者直接联系我。<br>最后再次强调，本文仅作为经验分享，请勿将其中内容二次修改用作商业用途。如有侵权也请联系我删除。<br>最后本文的全部代码已被我整合上传到了GitHub，详细请移步我的仓库 <a href="https://github.com/liuyunfz/chaoxing_tool" target="_blank" rel="noopener">chaoxing_tool</a> ,如果不介意的话可以给我个star支持下。</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义右键新建选项</title>
    <link href="/tutorial/windows-menu-new.html"/>
    <url>/tutorial/windows-menu-new.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为程序🐒，学习多门语言是必要的。所以我们常常要新建很多的类似.py,.c,cpp,.md等文件，并且都拥有一定的格式规范。比如python中的指定编码<code># -*- coding: utf-8 -*-</code>，又比如c中常引用的标准库<code>#include &lt;stdio.h&gt;</code> 。所以我们就需要自定义右键的新建菜单，创建一些常用的文件，并且带有一定的格式内容，避免重复的机械码字。<br>这个其实百度一下就会有很多结果，但是我参考的<a href="https://jingyan.baidu.com/article/8275fc86773b2446a03cf6f1.html" target="_blank" rel="noopener">百度经验</a>却并未能成功解决我的问题，最后通过阅读一位博主的博文才发现了问题所在并解决了问题，所以在这附上解决方案。<br>参考资料：<a href="https://www.cnblogs.com/wowMVP/archive/2010/04/08/1707884.html" target="_blank" rel="noopener">如何在Windows右键新建菜单中添加自定义项 - 乐水鱼 - 博客园</a></p><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><p>这里以新建.c文件为例，使用win+R，输入并打开注册表regedit。</p><h2 id="注册表操作"><a href="#注册表操作" class="headerlink" title="注册表操作"></a>注册表操作</h2><p>在<strong>HKEY_CLASSES_ROOT</strong>中新建项，命名为<code>.c</code>（如果没有本项的话）。<br>创建好后修改该项的默认值，我这边命名为C File。<br><img src="/img/menu/1.png" srcset="/img/loading.gif" alt=""><br>然后在.c目录下创建项，命名为ShellNew，这个名字与大小写必须保持一致。<br>然后在ShellNew目录下新建字符串值，命名为FileName，这个也需要保持一致。值则是指向你的模板文件目录，具体看创建模板的步骤。<br><img src="/img/menu/2.png" srcset="/img/loading.gif" alt=""><br>创建并修改完后我们.c目录下的任务就完成了，接下来继续在<strong>HKEY_CLASSES_ROOT</strong>新建项，名称为之前.c默认值中的数据，我的是C File。然后将该项的默认值修改为自己右键想要显示的名称与文字。<br><img src="/img/menu/3.png" srcset="/img/loading.gif" alt=""><br>到了这一步，我们注册表的任务就完成了，理论上现在你右键应该就能看到新创建的c文件了，如果没成功的话请检查前面的步骤。</p><h2 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h2><p>接下来我们要做的是创建模板文件，这一步其实并不难，只需要找个目录创建你要的文件，我这找了D盘创建了<strong>Untitled.c</strong>。并在里面输入了我常用的模板</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后只需要确保该文件目录与之前在注册表.c目录中的ShellNew目录下的FileName中一致即可。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>以下是效果<br><img src="/img/menu/4.png" srcset="/img/loading.gif" alt=""><br><img src="/img/menu/5.png" srcset="/img/loading.gif" alt=""><br>如果你想要了解更多自定义内容，如设置图标等，可以参考阅读<a href="https://www.cnblogs.com/wowMVP/archive/2010/04/08/1707884.html" target="_blank" rel="noopener">如何在Windows右键新建菜单中添加自定义项 - 乐水鱼 - 博客园</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>钉钉机器人</title>
    <link href="/tutorial/bot-dingtalk.html"/>
    <url>/tutorial/bot-dingtalk.html</url>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>前往我的仓库<a href="https://github.com/liuyunfz/DingTalkBot" target="_blank" rel="noopener">DingTalkBot</a>，并将它Fork到自己的仓库<img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/1.png" srcset="/img/loading.gif" alt="fork"></p><h1 id="配置钉钉"><a href="#配置钉钉" class="headerlink" title="配置钉钉"></a>配置钉钉</h1><p>首先选择自己要添加机器人的群，选择智能群助手<img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/2.png" srcset="/img/loading.gif" alt="ast"><br>添加机器人<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/3.png" srcset="/img/loading.gif" alt="robot"><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/4.png" srcset="/img/loading.gif" alt="add"><br>并选择自定义机器人<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/5.png" srcset="/img/loading.gif" alt="div"><br>安全设置选择加sign<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/6.png" srcset="/img/loading.gif" alt="sign"><br>记得要把上面加签的那段代码复制下来，作为sign。<br>然后会出现webhook，只需要复制token后面那一段，作为我们的token。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/7.png" srcset="/img/loading.gif" alt="token"></p><h1 id="配置Github-Action"><a href="#配置Github-Action" class="headerlink" title="配置Github Action"></a>配置Github Action</h1><p>接下来我们对我们fork了的仓库进行配置。打开我们fork了的仓库，选择Settings，然后选择Secrets。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/8.png" srcset="/img/loading.gif" alt="secrets">按照图示分别添加三个secret。一个是<strong>SECRET</strong>，一个是<strong>TOKEN</strong>。key就填之前钉钉给我们的。还有一个<strong>Mids</strong>填写的是你要关注的up主的id，可以不填，如果要订阅多个up主中间用逗号分隔就像<code>10160261,7053465</code>。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/11.png" srcset="/img/loading.gif" alt="mid"></p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>到了这里我们已经配置完毕了我们的机器人，如果你要修改运行频率的话可以按照仓库的MD文档进行修改。<br>最后，我们只需要点一下自己fork了的仓库的star <img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/9.png" srcset="/img/loading.gif" alt="">定时任务就启动了，具体可以在actions里查看。注意，fork了的仓库默认不会开启GitHub Action，记得手动去action里查看一下，如果出现了如图所示的样子 <img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/53.png" srcset="/img/loading.gif" alt=""> 点击绿色的”I understand…”启用GitHub Action即可。如果任务未成功启动，取消自己仓库的star再重新star一次即可。</p><p>以下是效果图：<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/dingtalk/10.png" srcset="/img/loading.gif" alt="stmp"><br>目前该机器人只添加了基于小刀网的线报推送与bilibili的up主投稿推送，如果你有其他建议，欢迎提交issue或拉取请求。</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
      <tag>钉钉</tag>
      
      <tag>Bot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网盘转存-将文件转存到OneDrive</title>
    <link href="/tutorial/mover-onedrive.html"/>
    <url>/tutorial/mover-onedrive.html</url>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先你得有个OneDrive账号以及你需要转存的源网盘。根据官方文档的说明，mover仅支持<strong>其他网盘转存至OneDrive</strong>，不支持OneDrive转存至其他网盘。除此之外，Mover似乎已经被微软收购了，所以可以直接登录你的Microsoft账号，也不太需要担心安全问题。  </p><p>官方支持的网盘如下：<br>  <strong>File Shares , Amazon S3 , Azure Blob Storage , Box , Dropbox , Egnyte , Google Drive , Office 365 , OneDrive , SharePoint Online</strong></p><p>网站地址： <a href="https://app.mover.io/login" target="_blank" rel="noopener">https://app.mover.io/login</a>  </p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>因为我个人也有转存的需求（我的大多数资源都是GD资源群里转存来的，所以都在GD里，而国内因为众所周知的原因无法直接访问）所以就想把GD里的东西转存到OneDrive里（office的E5账号附带了5T的空间）。E5应该是人均都有的，所以这里也就不赘述了。  </p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>首先登录上我们的微软账户，可以直接登录Business账号。<img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/mover/1.png" srcset="/img/loading.gif" alt=""><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/mover/2.png" srcset="/img/loading.gif" alt=""></p><h2 id="网盘连接"><a href="#网盘连接" class="headerlink" title="网盘连接"></a>网盘连接</h2><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/mover/3.png" srcset="/img/loading.gif" alt=""><br>这里我选择Google Drive (Single User)，好像就是普通用户的Google Drive目录。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/mover/4.png" srcset="/img/loading.gif" alt=""><br>授权的时候记得还是要开启某种神秘力量的，因为需要调用Google的授权。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/mover/5.png" srcset="/img/loading.gif" alt=""><br>选择完源与目录后就可以进行start copy了。不过因为我的资源都是转存到了团队Google Drive里了，所以我的个人账户里并没有文件。这边我用到是一个支持WebDave的app——Mixplore，我不知道网页版能不能直接进行操作，不过这个可以直接将团队盘里的文件复制到个人盘里。<br>这边也安利一下这个软件，支持的协议和网盘还是很多的。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/mover/6.png" srcset="/img/loading.gif" alt=""><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/mover/6.jpg" srcset="/img/loading.gif" alt=""><br>具体步骤就是直接从团队盘里复制，然后退回到自己的盘目录，然后粘贴即可，一般等待一到两秒即可。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/mover/2.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="开始转存"><a href="#开始转存" class="headerlink" title="开始转存"></a>开始转存</h2><p>然后回到我们的mover，刷新一下就可以看到网盘里的内容更新了，可以发现Google Drive个人盘里已经多了我们刚刚复制过去的了，然后选择好目录后就直接点击start copy即可。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/mover/7.png" srcset="/img/loading.gif" alt=""><br>这个running的任务就是我们刚刚创建的了，因为我之前已经自己试过了，所以显示已经完成了一个任务。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/mover/8.png" srcset="/img/loading.gif" alt=""><br>接下来静待几分钟即可。在这段时间内我们也可以关闭我们的网页，如果想要查看的话只需要登录mover后在migration manager里查看就行。<br>最后转存完成，总大小7.94G，耗时29min，虽然不算快，但是胜在不耗流量不需要常驻。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/mover/9.png" srcset="/img/loading.gif" alt=""></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>总体来说mover是个不错的转存方式，不仅可以剩下流量时间，而且完全免费。唯一的缺憾就是他只能将其他文件转存到OneDrive里，而且不支持某度。</p>]]></content>
    
    
    
    <tags>
      
      <tag>OneDrive</tag>
      
      <tag>Google Drive</tag>
      
      <tag>网盘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【issue 已解决】一次gzip导致的编码问题</title>
    <link href="/issue/issue-gzip.html"/>
    <url>/issue/issue-gzip.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了省去每日都要手动签到的麻烦，我想要做一个某机场的自动签到。综合分析下来，技术难度并不大，只是普通的两个request包，一个实现登录，一个实现签到即可，而且并无啥验证码或者sign验证等。<br>而当我尝试写完了所有代码，完事具备只欠东风时，却发现返回的结果莫名乱码了。<br><img src="/img/51.png" srcset="/img/loading.gif" alt="code"></p><h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><p>既然出现了乱码，理所当然第一时间想到的就是response的解码出现了问题。于是我尝试手动设置为UTF-8解码，因为我看了下网页源码里有指明charset为UTF-8</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">rsp.encoding=<span class="hljs-string">"utf-8"</span><br></code></pre></div></td></tr></table></figure><p>结果出乎意料，我的问题并没有得到解决，返回的内容仍然是乱码状态。于是我又尝试了其他编码:gbk,gb2312等。结果都没有返回我想要的正确字符。 </p><h2 id="GZIP问题"><a href="#GZIP问题" class="headerlink" title="GZIP问题"></a>GZIP问题</h2><p>注意到gzip是由于我将乱码的字符放到了搜索引擎，发现也曾有人提出过类似的问题，并且给出了gzip的相关内容，可惜涉及的不深，内容也比较少。于是我在了解到可能是gzip问题时就尝试自己发掘错误。<br>我观察了我的response-headers，发现其中正好有gzip<code>&#39;accept-encoding&#39;:&#39;gzip, deflate, br&#39;,</code> ，于是我猜测可能是python在进行解码时并未先对返回内容进行gizp解压，从而导致的乱码错误。<br>然后我就上网查阅了python相关的gzip调用解压，在response解码前先对其进行gzip解压。结果依然是乱码，到此我便陷入了深深的困惑，这个问题一直卡了我三四天。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>其实到了上面的gzip，我已经离答案非常解决了，可惜我错想了一步。我认为的是response本身已经gzip压缩了，但python没有解压。而实际情况则是response本身没有压缩，而python读取到headers里的gzip，自动为response进行了解压。结果就导致了上面出现了乱码。<br>最后的修改也很简单，只需要手动将accept-encoding中相关的gzip删除，以防止python的错误判断即可。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">'accept-encoding'</span>:<span class="hljs-string">'deflate'</span>,<br></code></pre></div></td></tr></table></figure><p>再次尝试，问题成功得到了解决。<br><img src="/img/52.png" srcset="/img/loading.gif" alt="code_success"></p>]]></content>
    
    
    <categories>
      
      <category>issue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>issue</tag>
      
      <tag>gzip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为微信公众号接入疫情数据查询</title>
    <link href="/tutorial/python-wechat-searchvirus.html"/>
    <url>/tutorial/python-wechat-searchvirus.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>话接上文的《利用Python爬取丁香园疫情数据》，本次将利用这个完成的api，对接微信，实现微信公众号疫情查询。如果未看过上一篇文章的，可以 <a href="https://blog.6yfz.cn/tutorial/python-spider-dxy.html">点我前往</a> 。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>本次利用了python微信公众号开发框架的一个模块——<a href="https://github.com/offu/WeRoBot" target="_blank" rel="noopener">werobot</a>，具体功能可以阅读<a href="https://werobot.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">官方文档</a>。<br>除此之外，我们还需要一台服务器（仅指出80或443端口），用作公众号的功能对接。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>为了文章内容与字数考虑，本文不从零开始描述如何进行公众号的基本对接和验证，直接开始到功能添加。</p><h2 id="判断公众号位置数据内容"><a href="#判断公众号位置数据内容" class="headerlink" title="判断公众号位置数据内容"></a>判断公众号位置数据内容</h2><p>为了判断用户位置，我们需要知道用户发送了的地图位置数据在后台显示的是什么，所以我们分别到前后端进行查看。</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>首先后端先写好调试的代码，为了方便观察，我们debug和return同时返回用户发送的location的数据内容。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/43.png" srcset="/img/loading.gif" alt="代码"><br>并且启动我们的端口监听<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/44.png" srcset="/img/loading.gif" alt="启动"></p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>然后我们去前端发送位置数据，看看返回了什么。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/46.jpg" srcset="/img/loading.gif" alt="前端"></p><h3 id="数据判断"><a href="#数据判断" class="headerlink" title="数据判断"></a>数据判断</h3><p>再去看看后端<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/45.png" srcset="/img/loading.gif" alt="后端"><br>可以看到，前端和后端都返还了一个经纬度数据，并且数据类型是tuple（可以自行用type()函数进行查询）。</p><h2 id="逆地理编码"><a href="#逆地理编码" class="headerlink" title="逆地理编码"></a>逆地理编码</h2><p>微信公众号的地图数据返回的是经纬度信息，但是我们上次实现的是利用地区的名字判断查询的疫情数据，所以我们需要用到<a href="http://lbsyun.baidu.com/" target="_blank" rel="noopener">百度开发平台</a>的逆地理编码，实现将左边地址转换为地区信息。即使是未认证的用户也有每日六千条的配额，并发50次/s，对于普通用户来说完全足够。<br>所以我们利用百度账号登录这个开发者平台，创建一个应用<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/46.png" srcset="/img/loading.gif" alt="注册应用"><br>具体步骤就不展示了，记得勾选逆地理编码就行。<br>然后我们查看官方的<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding-abroad" target="_blank" rel="noopener">逆地理编码调用文档</a><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/47.png" srcset="/img/loading.gif" alt="服务文档"><br>这边你们自己看看奥，既然都是程序员了，这点基础肯定有的，或者看我写的成品。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/48.png" srcset="/img/loading.gif" alt="api请求"><br>为了不必要的麻烦，我们先本地指定经纬度，并且分析下返回的数据。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/49.png" srcset="/img/loading.gif" alt="api返回数据"><br>可以发现是成功的，我们也知道返回json的具体内容，剩下的就是接入完善了。</p><h2 id="代码接入"><a href="#代码接入" class="headerlink" title="代码接入"></a>代码接入</h2><p>上面的api已经写完了，然后就是和上次的内容对接了。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/50.png" srcset="/img/loading.gif" alt="功能对接"></p><h1 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h1><p>我们再将写好的代码转到后端，然后运行。去前端试一试。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/50.jpg" srcset="/img/loading.gif" alt="功能测试"><br>大功告成！  </p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>本次主要的难点在于需要调用百度的地理逆编码，总体还是简单的，这样我们就为我们的公众号增添了一个疫情查询功能。  </p><p>但是这段代码仍然有缺陷：</p><ol><li>是上次遗留下来的问题，地区查询因为部分例如自治区或者街道等特殊名称，导致无法利用简单的[:-1]进行匹配</li><li>其实也和第一个差不多，我们利用的是名字暴力循环匹配查找，理想状态是直接通过经纬度获得疫情数据（应该能实现，但得另外想办法抓包了）</li></ol><p>以上是全部内容，如果有疑问或者不对，又或者是有更好的解决办法，都可以在下面留言或者通过其他方式联系我~</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
      <tag>微信公众号</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日记-2020年4月20日</title>
    <link href="/diary/20200420.html"/>
    <url>/diary/20200420.html</url>
    
    <content type="html"><![CDATA[<div class="note note-primary"><p><strong>2020.04.23： 已更新后续</strong></p></div>  <h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在是晚上的23点22分，本来我已经关闭了电脑，并且洗漱完打算上床，但因为一件事久久不能释怀。  </p><h1 id="事情经过"><a href="#事情经过" class="headerlink" title="事情经过"></a>事情经过</h1><p>这段不幸的经历发生在一个我刚认识了不到一周的来自酷安的群友。就在昨日，他还在和我们畅谈打算明日在阿里云买台学生机，然后把域名备案。然而今天一早，却收到了他的消息。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/38.png" srcset="/img/loading.gif" alt="img"><br>昨天还说要备案的，怎么今天突然说要博客路要暂时停止了？<br>随即而来的，是我一直有耳闻，但却从未真切感受到的事——DDOS<br>以下是聊天记录：<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/39.png" srcset="/img/loading.gif" alt="img"><br>以下是涉及到的图片<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/41.jpg" srcset="/img/loading.gif" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/40.jpg" srcset="/img/loading.gif" alt="img"><br>短短一个晚上，6T的流量，直接欠费4500元，这对任何一个个人博客都是一个难以承担的数目，而这个不幸的遭遇者，还仅仅是一个初中生。  </p><h1 id="感思"><a href="#感思" class="headerlink" title="感思"></a>感思</h1><p>我为他的遭遇感到不幸，但我却不能为他做点什么，因为在此之前我从未遇到过这类事情。我无话可说，只能劝他保持心态，以及写下这篇文章用来警醒你我。被DDOS也许只是一个随机的事件，但谁也不能保证它不会降临到自己的身上，我们只有在危机到来之前，做好准备。<br>截至现在23：40分，腾讯云官方客服的态度仍然是不对流量及费用进行退回，可能会报公安吧，但它没备案，也不知道能不能成功。<br>就先写到这吧，有后续我会继续在这篇文章更进，希望它能挺过这一劫。</p><h1 id="后续（更新于4-23"><a href="#后续（更新于4-23" class="headerlink" title="后续（更新于4.23)"></a>后续（更新于4.23)</h1><p>话接上文，这位群友因为受到DDOS攻击，巨额的流量与请求费用使得腾讯云欠款4000+元。最后和腾讯云客服协商说是因为这是真实流量，没有成功挽回金额，本打算报案，但估计当事人最后也不了了之了。  </p><p>今天已是4.23日，距离事情发生已经过去了约3日，这三天内我了解了很多。许多个人博客用户都在19日当晚到20日早晨受到了攻击，损失金额也在百元不等，虽然比不上上文这位上千的，但都是一笔不小的损失了。事后，我的博客也在第二日收到了十余次web应用攻击（刚在去报表的时候发现又受到了一次攻击）。可以看出这是一次用户集群密度比较大的范围攻击，所以还是要提醒广大站长做好安全工作，CDN也尽量使用带有防御识别的。  </p><p>谨以此文，时刻警醒我网络安全的重要性。</p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【issue 已解决】Valine网址指向的一个小坑</title>
    <link href="/issue/hexo-valine-issue.html"/>
    <url>/issue/hexo-valine-issue.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用hexo博客的，肯定有很多评论系统用的是valine吧，毕竟这个方便还漂亮。并且支持的也不错，国内可以直连。但是我却因为一个小问题困扰了我两三个月之久（主要因为也没啥人来我博客评论）所以就一直没想着去修。<br>直到今天，我去改了一下leancloud的休眠政策，就想着顺便修复一下这个bug。 </p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>正常的显示，邮件收发都没啥问题，但唯独在邮件通知时，查看评论原文的地址指向出现了错误，不仅如此，在后台管理的地址指向也同样出现了错误。<br>本来应该是：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">http://blog.6yfz.cn/tutorial/python-spider-dxy.html<br></code></pre></div></td></tr></table></figure><p>但指向却变成了</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">http://blog.6yfz.cn//tutorial/python-spider-dxy.html<br></code></pre></div></td></tr></table></figure><p>虽然网页显示上不会出现404，依然是正确的地址，但是因为valine的评论识别靠的的地址，所以就会导致看不到那个指向的评论。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/35.png" srcset="/img/loading.gif" alt="正常地址的评论"><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/36.png" srcset="/img/loading.gif" alt="错误地址的评论"></p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><p>解决的方法其实很简单，出错原因是因为valine的SITE_URL环境变量错误设置导致的，他会默认在该变量后添加具体的深层地址，即</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/tutorial/python-spider-dxy.html<br></code></pre></div></td></tr></table></figure><p>所以只需要将SITE_URL设置例如 <a href="http://blog.6yfz.cn">http://blog.6yfz.cn</a> 的，而不要 <a href="http://blog.6yfz.cn/">http://blog.6yfz.cn/</a> ，这也是我错误的原因<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/37.png" srcset="/img/loading.gif" alt="img"><br>到头来发现自己的错误真是觉得又气又笑😹</p>]]></content>
    
    
    <categories>
      
      <category>issue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>issue</tag>
      
      <tag>valine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Python爬取丁香园疫情数据</title>
    <link href="/tutorial/python-spider-dxy.html"/>
    <url>/tutorial/python-spider-dxy.html</url>
    
    <content type="html"><![CDATA[<p>疫情到现在过去很久了，国内已经大体控制下来了。这次的目标是爬取利用python爬取疫情数据（基于丁香园的数据）<br>这期本来3.9就创建了的，但一直拖到今天4.13才完成，还是太懒😂😂 </p><h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><ol><li>python及常用模块</li><li>VS Code</li><li>浏览器<br>目标网址：<a href="https://ncov.dxy.cn/ncovh5/view/pneumonia?scene=2&clicktime=1579579384&enterid=1579579384&from=timeline&isappinstalled=0" target="_blank" rel="noopener">https://ncov.dxy.cn/ncovh5/view/pneumonia?scene=2&amp;clicktime=1579579384&amp;enterid=1579579384&amp;from=timeline&amp;isappinstalled=0</a>  <a id="more"></a> <h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="1-抓包"><a href="#1-抓包" class="headerlink" title="1.抓包"></a>1.抓包</h3>首先是抓包<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/28.png" srcset="/img/loading.gif" alt="img"><br>经过分析可以看出，该网页的数据不同于平常的一个框架+单独的json数据包，它是直接渲染好了给我们传过来的，所以要做的事情就比较简单了，只需要从html代码中提取出我们需要的数据。<h3 id="2-python代码编写"><a href="#2-python代码编写" class="headerlink" title="2.python代码编写"></a>2.python代码编写</h3>我们先实现获取html代码的代码，然后再尝试从中提取数据。<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">response = requests.get(<span class="hljs-string">"https://ncov.dxy.cn/ncovh5/view/pneumonia?scene=2&amp;clicktime=1579579384&amp;enterid=1579579384&amp;from=timeline&amp;isappinstalled=0"</span>)<br>response.encoding = <span class="hljs-string">"utf-8"</span><br>body = response.text<br></code></pre></div></td></tr></table></figure>这里指定了一下编码，是为了防止出现不必要的转码错误。  <h3 id="3-提取HTML中的代码"><a href="#3-提取HTML中的代码" class="headerlink" title="3.提取HTML中的代码"></a>3.提取HTML中的代码</h3>获取网页数据实现了，接下来我们分析一下数据的位置，以及该如何提取出来。<img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/29.png" srcset="/img/loading.gif" alt="img"><br>通过观察我们可以发现，它是利用一个script一个区域数据，分别对应的是全球地区，全国地区等，里面是一串类似是js代码，先不管，先把我们这次要的国内数据提代码取出来。<img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/30.png" srcset="/img/loading.gif" alt="img"><br>通过分析，国内的数据script对应的id值是“getAreaStat” 。因为是属于一个类里的，所以这里我用了xpath，代码如下：<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">html = etree.HTML(body, etree.HTMLParser())<br>gethtml = html.xpath(<span class="hljs-string">'//*[@id="getAreaStat"]/text()'</span>)<br></code></pre></div></td></tr></table></figure><h3 id="4-提取代码中的数据"><a href="#4-提取代码中的数据" class="headerlink" title="4.提取代码中的数据"></a>4.提取代码中的数据</h3>经过上面的步骤，我们已经实现了提取出了国内数据的js代码，但是很明显我们只需要数据，而我们利用python也不可能执行这串window.getAreaStat代码，所以我们尝试删去赋值等代码，直接提取数据，因为里面的数据刚好符合json格式。<br>要删除的头数据<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/31.png" srcset="/img/loading.gif" alt="img"><br>要删除的尾数据<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/32.png" srcset="/img/loading.gif" alt="img"><br>即<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">gethtml[<span class="hljs-number">0</span>][<span class="hljs-number">28</span>:<span class="hljs-number">-12</span>]<br></code></pre></div></td></tr></table></figure>这里[0]是因为前面xpath查找的返回的是list，因为我们指定了id，所以应该只能找到一个，并且正好是我们想要的，然后用[28:-12]提取出完美的json格式的数据。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/33.png" srcset="/img/loading.gif" alt="img"> <h3 id="5-查找数据"><a href="#5-查找数据" class="headerlink" title="5.查找数据"></a>5.查找数据</h3>虽然每个省份都是一个很好的json数据，但是我们要取的是整个省份，所以我们将其转化为列表，然后利用迭代，查找到我们需要的城市。<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">data=eval(gethtml[<span class="hljs-number">0</span>][<span class="hljs-number">28</span>:<span class="hljs-number">-12</span>])<br>p_count=<span class="hljs-string">"0"</span><br>c_count=<span class="hljs-string">"0"</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>    <span class="hljs-keyword">if</span> str(i.get(<span class="hljs-string">"provinceName"</span>)) == province:<br>        p_count=str(i.get(<span class="hljs-string">"confirmedCount"</span>))<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> i[<span class="hljs-string">"cities"</span>]:<br>            <span class="hljs-keyword">if</span> str(c.get(<span class="hljs-string">"cityName"</span>)) == city[<span class="hljs-number">0</span>:<span class="hljs-number">-1</span>]:<br>                c_count=c.get(<span class="hljs-string">"confirmedCount"</span>)<br>                <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure>然后我们调试看看<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/34.png" srcset="/img/loading.gif" alt="img"><br>可以发现已经成功了，至于我为什么要用到city[0:-1]，是为了对接微信的地理位置数据，这个我会在下一次的博文介绍。<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>这次的难点主要在数据并不是一个单独的json包里，需要我们自己从html代码中获取，并且获取的是js代码，我们还要额外提取其中的数据，总的来说还是难度不大的。<br>如果有疑问可以在下面评论联系我，那我们下期见~</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实战Python爬取B站评论</title>
    <link href="/tutorial/python-spider-bilibili-comments.html"/>
    <url>/tutorial/python-spider-bilibili-comments.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>本人是一个崩坏三的游戏玩家，大家也都知道官方会因为一些活动，在其他平台发布一些兑换码。为了更方便的获取水晶，就一直有这么个想法，想爬取B站的评论，利用热心网友在官方账号动态下发的评论，来实现获取最新的水晶兑换码。（本思路启迪于酷安一位用网站RSS获取水晶码的大佬，很早以前见过他的帖子，但现在找不到了，这里匿名感谢下） </p><a id="more"></a>   <h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><hr><p>本次用到的有：  </p><ol><li>浏览器 （本人使用的是Chrome）  </li><li>Python3（模块包含：requests，json，time）<br>本次实战的地址：<a href="https://space.bilibili.com/27534330/dynamic" target="_blank" rel="noopener">https://space.bilibili.com/27534330/dynamic</a><br>本次实战的目标：爬取下该链接下的所有评论  <h1 id="实战开始"><a href="#实战开始" class="headerlink" title="实战开始"></a>实战开始</h1></li></ol><hr><h3 id="获取评论数据包"><a href="#获取评论数据包" class="headerlink" title="获取评论数据包"></a>获取评论数据包</h3><p>打开开发者工具，然后通过查看评论来获取我们要的数据包，很好找<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/23.png" srcset="/img/loading.gif" alt="img"><br>然后我们模拟发送get包来获取数据</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_comment</span><span class="hljs-params">(oid=str,types=int)</span>:</span><br>    headers_small=&#123;<br>        <span class="hljs-string">'Accept'</span>:<span class="hljs-string">'*/*'</span>,<br>        <span class="hljs-string">'Accept-Encoding'</span>:<span class="hljs-string">'gzip, deflate, br'</span>,<br>        <span class="hljs-string">'Accept-Language'</span>:<span class="hljs-string">'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7'</span>,<br>        <span class="hljs-string">'Connection'</span>:<span class="hljs-string">'keep-alive'</span>,<br>        <span class="hljs-string">'Cookie'</span>:<span class="hljs-string">r''</span>,<br>        <span class="hljs-string">'Host'</span>:<span class="hljs-string">'api.bilibili.com'</span>,<br>        <span class="hljs-string">'Referer'</span>:<span class="hljs-string">'https://space.bilibili.com/27534330/dynamic'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Mode'</span>:<span class="hljs-string">'no-cors'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Site'</span>:<span class="hljs-string">'same-site'</span>,<br>        <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> types==<span class="hljs-number">2</span>:<br>        rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=11&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">elif</span> types==<span class="hljs-number">8</span>:    <br>        rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=1&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">elif</span> types==<span class="hljs-number">4</span>:<br>        rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=17&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">elif</span> types==<span class="hljs-number">1</span>:<br>        rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=17&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">"types error"</span>+str(types))<br></code></pre></div></td></tr></table></figure><p>嗯<br>*<em>这里用到了两个参数，一个oid对应的是帖子的标识码，获取方法在下方，还有一个参数type是帖子的类型，对应了url里面的type，这里先一笔带过，具体我会在下面的内容中写到。 *</em></p><hr><p>然后我们分析response，通过返回的数据我猜测这是一个jQuery，奈何我没学过，但是不要紧，它的数据类型和json很像，于是我将jQuery的特征码去除，直接当作json处理<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/24.png" srcset="/img/loading.gif" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">rsp_json=json.loads(rsp.text[<span class="hljs-number">42</span>:<span class="hljs-number">-1</span>])<br></code></pre></div></td></tr></table></figure><p>这段代码就是实现将jQuery特征码去除，变成我们可以处理的json.<br>然后利用network里的preview，我们可以很清晰的得出评论的目录为<strong>/data/hots/(0-5)/content/message</strong><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/25.png" srcset="/img/loading.gif" alt="img"><br>于是写出如下代码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(rsp_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"hots"</span>])):<br>        print(str(i+<span class="hljs-number">1</span>)+<span class="hljs-string">":   "</span>+rsp_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"hots"</span>][i][<span class="hljs-string">"content"</span>][<span class="hljs-string">"message"</span>])<br>        print(<span class="hljs-string">"_______________________________________"</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></div></td></tr></table></figure><p>到此，我们的获取评论数据功能已经实现（这里我选择的是热评，对应的是hots，也可以自己选择爬取所有的评论）。接下来是获取oid数据来实现批量爬取。</p><h3 id="获取动态数据包"><a href="#获取动态数据包" class="headerlink" title="获取动态数据包"></a>获取动态数据包</h3><p>首先打开开发者工具，通过刷新来重新获取发送与接受到的数据。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/gif_1.gif" srcset="/img/loading.gif" alt="gif"><br>找到我们需要的获取动态的包（小技巧是获取完动态的数据后肯定要向服务器获取动态的一些静态图片，所以在一堆图片的数据包前面找）<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/21.png" srcset="/img/loading.gif" alt="img"><br>然后将headers复制，按照之前的步骤一样，模拟数据包的发送<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/22.png" srcset="/img/loading.gif" alt="img"><br>写完数据包的发送后，我们开始对发送回来的response进行处理，这里直接通过浏览器的preview进行分析处理（排版挺好的），得出结论我们需要的动态地址的关键信息oid目录为<strong>/data/cards/(0-19)/desc/dynamic_id_str(或者rid_str)</strong>，说实话这里的oid分析卡了我好几天，因为根据动态的类型不同，对应的oid可能是rid，也可能是dynamic_id。<br>最后我通过穷举法归纳了以下，根据<strong>/data/cards/(0-19)/desc/type</strong>，2和8对应的是oid是rid，其他的4和1对应的是dynamic。<br>利用json，故得出以下代码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">dynamic_json=json.loads(dynamic.text)<br>comment_list=[]<br>comment_type_list=[]<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>])):<br>        comment_type=dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>][i][<span class="hljs-string">"desc"</span>][<span class="hljs-string">"type"</span>]<br>        <span class="hljs-keyword">if</span> comment_type == <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> comment_type==<span class="hljs-number">8</span> :<br>            comment_list.append(dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>][i][<span class="hljs-string">"desc"</span>][<span class="hljs-string">"rid_str"</span>])<br>        <span class="hljs-keyword">else</span>:<br>            comment_list.append(dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>][i][<span class="hljs-string">"desc"</span>][<span class="hljs-string">"dynamic_id_str"</span>])<br>        comment_type_list.append(comment_type)<br>        <br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">return</span>([comment_list,comment_type_list])<br></code></pre></div></td></tr></table></figure><p>在这里我将oid与type一并返回了，type将在后来的评论获取中再次派上用处。到这里我们其实已经实现了所有功能，只要将上面两个function结合，即可实现爬取所有动态的评论。</p><h3 id="type与oid的处理"><a href="#type与oid的处理" class="headerlink" title="type与oid的处理"></a>type与oid的处理</h3><p>我觉得这是整个爬取过程的难点，直到这篇文章发布前，我仍未找到有效的解决方法，只能用穷举法。所幸也实现了我们需要的功能。<br>重新来看看我们评论数据包的地址，发现oid与动态对应的地址对上了，也就是我们之前获取的dynamic<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/26.png" srcset="/img/loading.gif" alt="img"><br>但是也有些动态并不符合这个规律，它的oid没有与动态的地址对应，也就不是dynamic，而是rid。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/27.png" srcset="/img/loading.gif" alt="img"><br>经过穷举的尝试，得出如下结论：<br>获取的type为2时，评论地址的oid对应rid，地址的type对应11<br>获取的type为8时，评论地址的oid对应rid，地址的type对应1<br>获取的type为4时，评论地址的oid对应dynamic，地址的type对应17<br>获取的type为1时，评论地址的oid对应dynamic，地址的type对应17<br>于是才得出了上面写的代码。  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p>以下为我在个人尝试中的一些错误，仅供各位参考借鉴：  </p><ol><li>受老旧思想禁锢，我的第一感觉是直接访问动态的地址来获取信息，也就是request-<a href="https://space.bilibili.com/27534330/dynamic" target="_blank" rel="noopener">https://space.bilibili.com/27534330/dynamic</a>  。结果错误返回，提示过多的重定向错误<figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">requests</span><span class="hljs-selector-class">.exceptions</span><span class="hljs-selector-class">.TooManyRedirects</span>: <span class="hljs-selector-tag">Exceeded</span> 30 <span class="hljs-selector-tag">redirects</span>.<br></code></pre></div></td></tr></table></figure>于是我通过查找信息,添加参数allow_redirects=False来忽略这个错误，结果是不报错了，但仍然没得到想要的数据，后来才想到通过数据包来获取动态数据  </li><li>jQuery那段我也不清楚是不是jQuery，毕竟没接触过。然后凑巧的是当我将他前面的无关数据剔除掉后，他就是一个非常完美的json数据格式，有点投机取巧的感觉。  </li><li>最后一点就是type和oid了，说实话穷举的方法实在不可取，但也是没办法，他获取的type也与链接里的type并不一致。目前我的猜想是在之前的数据包中有类似的js文件，用来进行对type的处理。  <h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2>全文共1800余字，感谢你能看到这里，打赏这种不可能的我也就不说了。<del>成品文件我已放在了<a href="https://github.com/liuyunfz/bilibili_Extraction-cover/blob/master/bh3.py" target="_blank" rel="noopener">我的GitHub</a>上</del>，如果有什么疑问或者我的代码有何问题，请在下方的评论区回复。<br>因为某些原因已经删除了该项目的GitHub仓库，所以直接在下面附上代码。需要注意的是本文件在获取评论的基础上增加了获取崩坏三兑换码的功能（尚未完善），但是获取评论的代码以自定义函数的方式独立出现，所以仍不影响阅读学习。<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> requests,json,time,re<br>dhm=[]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_comment</span><span class="hljs-params">(oid=str,types=int)</span>:</span><br>    <br>    headers_small=&#123;<br>        <span class="hljs-string">'Accept'</span>:<span class="hljs-string">'*/*'</span>,<br>        <span class="hljs-string">'Accept-Encoding'</span>:<span class="hljs-string">'gzip, deflate, br'</span>,<br>        <span class="hljs-string">'Accept-Language'</span>:<span class="hljs-string">'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7'</span>,<br>        <span class="hljs-string">'Connection'</span>:<span class="hljs-string">'keep-alive'</span>,<br>        <span class="hljs-string">'Cookie'</span>:<span class="hljs-string">r''</span>,<br>        <span class="hljs-string">'Host'</span>:<span class="hljs-string">'api.bilibili.com'</span>,<br>        <span class="hljs-string">'Referer'</span>:<span class="hljs-string">'https://space.bilibili.com/27534330/dynamic'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Mode'</span>:<span class="hljs-string">'no-cors'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Site'</span>:<span class="hljs-string">'same-site'</span>,<br>        <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'</span><br>    &#125;<br>    <span class="hljs-comment">#requests.exceptions.TooManyRedirects: Exceeded 30 redirects.           太多重定向，使用allow_redirects=False   302重定向页面</span><br>    <span class="hljs-keyword">if</span> types==<span class="hljs-number">2</span>:<br>        rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=11&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">elif</span> types==<span class="hljs-number">8</span>:    <br>        rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=1&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">elif</span> types==<span class="hljs-number">4</span>:<br>        rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=17&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">elif</span> types==<span class="hljs-number">1</span>:<br>        rsp=requests.get(url=<span class="hljs-string">"https://api.bilibili.com/x/v2/reply?callback=jQuery172017694877061996372_1580287236452&amp;jsonp=jsonp&amp;pn=1&amp;type=17&amp;oid=&#123;0&#125;&amp;sort=2&amp;_=1580287547926"</span>.format(oid),headers=headers_small,allow_redirects=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">"types error"</span>+str(types))<br>    <span class="hljs-comment">#print(rsp.status_code)</span><br>    <br>    <span class="hljs-keyword">try</span>:<br>        rsp_json=json.loads(rsp.text[<span class="hljs-number">42</span>:<span class="hljs-number">-1</span>])<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-string">'''</span><br><span class="hljs-string">    with open("D:/py/123.htm","w",encoding='utf-8')as f:</span><br><span class="hljs-string">        f.write(rsp.text[41:-1])</span><br><span class="hljs-string">    #rsp_xpath = selector.xpath('//div[@id="app"]/div[@class="s-space"]/div/div/div/div/div/div')</span><br><span class="hljs-string"></span><br><span class="hljs-string">    rsp_json=json.loads(rsp.text)</span><br><span class="hljs-string">    rsp_jsonpath=jsonpath.jsonpath(rsp_json,'$..message')</span><br><span class="hljs-string">    print(rsp_jsonpath)</span><br><span class="hljs-string">    '''</span><br><br>    <span class="hljs-string">'''</span><br><span class="hljs-string">    for i in range(len(rsp_json["data"]["hots"])):</span><br><span class="hljs-string"></span><br><span class="hljs-string">        print(rsp_json["data"]["hots"][i]["replies"][i]["content"]["message"])</span><br><span class="hljs-string">    评论中的评论</span><br><span class="hljs-string">    '''</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(rsp_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"hots"</span>])):<br>            print(str(i+<span class="hljs-number">1</span>)+<span class="hljs-string">":   "</span>+rsp_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"hots"</span>][i][<span class="hljs-string">"content"</span>][<span class="hljs-string">"message"</span>])<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">"([a-z0-9A-Z]&#123;10,17&#125;)"</span>,rsp_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"hots"</span>][i][<span class="hljs-string">"content"</span>][<span class="hljs-string">"message"</span>]):<br>                    dhm.append(x)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br>            <br>            <span class="hljs-string">'''</span><br><span class="hljs-string">            try:</span><br><span class="hljs-string"></span><br><span class="hljs-string">                for j in range(len(rsp_json["data"]["hots"][i]["replies"])):</span><br><span class="hljs-string">                    print("                         "+rsp_json["data"]["hots"][i]["replies"][j]["content"]["message"])</span><br><span class="hljs-string">            except:</span><br><span class="hljs-string">                pass</span><br><span class="hljs-string">            '''</span><br>            print(<span class="hljs-string">"_______________________________________"</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_dynamic</span><span class="hljs-params">()</span>:</span><br>    dynamic_headers=&#123;<br>        <span class="hljs-string">'Accept'</span>:<span class="hljs-string">'application/json, text/plain, */*'</span>,<br>        <span class="hljs-string">'Accept-Encoding'</span>:<span class="hljs-string">'gzip, deflate, br'</span>,<br>        <span class="hljs-string">'Accept-Language'</span>:<span class="hljs-string">'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7'</span>,<br>        <span class="hljs-string">'Connection'</span>:<span class="hljs-string">'keep-alive'</span>,<br>        <span class="hljs-string">'Cookie'</span>:<span class="hljs-string">r''</span>,<br>        <span class="hljs-string">'Host'</span>:<span class="hljs-string">'api.vc.bilibili.com'</span>,<br>        <span class="hljs-string">'Origin'</span>:<span class="hljs-string">'https://space.bilibili.com'</span>,<br>        <span class="hljs-string">'Referer'</span>:<span class="hljs-string">'https://space.bilibili.com/27534330/dynamic'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Mode'</span>:<span class="hljs-string">'cors'</span>,<br>        <span class="hljs-string">'Sec-Fetch-Site'</span>:<span class="hljs-string">'same-site'</span>,<br>        <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36'</span><br>    &#125;<br>    dynamic=requests.get(url=<span class="hljs-string">"https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/space_history?visitor_uid=7053465&amp;host_uid=27534330&amp;offset_dynamic_id=0&amp;need_top=1"</span>,headers=dynamic_headers)<br>    dynamic_json=json.loads(dynamic.text)<br>    comment_list=[]<br>    comment_type_list=[]<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>])):<br>            comment_type=dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>][i][<span class="hljs-string">"desc"</span>][<span class="hljs-string">"type"</span>]<br>            <span class="hljs-keyword">if</span> comment_type == <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> comment_type==<span class="hljs-number">8</span> :<br>                comment_list.append(dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>][i][<span class="hljs-string">"desc"</span>][<span class="hljs-string">"rid_str"</span>])<br>            <span class="hljs-keyword">else</span>:<br>                comment_list.append(dynamic_json[<span class="hljs-string">"data"</span>][<span class="hljs-string">"cards"</span>][i][<span class="hljs-string">"desc"</span>][<span class="hljs-string">"dynamic_id_str"</span>])<br>            comment_type_list.append(comment_type)<br>            <br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span>([comment_list,comment_type_list])  <br>    <br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:<br>    t=time.time()<br>    comments=[]<br>    comments_type=[]<br>    comments=get_dynamic()[<span class="hljs-number">0</span>]<br>    comments_type=get_dynamic()[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> x,y <span class="hljs-keyword">in</span> zip(comments,comments_type):<br>        print(str(x)+<span class="hljs-string">"      "</span>+str(y))<br>        get_comment(x,y)<br>        <span class="hljs-comment">#time.sleep(3)</span><br>    print(time.time()-t)<br>    print(dhm)<br></code></pre></div></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
      <tag>bilibili</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为hexo-yilia添加文章阅读数</title>
    <link href="/tutorial/hexo-busuanzi.html"/>
    <url>/tutorial/hexo-busuanzi.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直想为博客添加一个阅读数统计，一个是方便查看，另一方面也会使自己更有成就感。于是在网上搜索了下教程，发现hexo的统计大多用的都是不蒜子的统计，于是也就随大流使用。但是在期间遇到了一些问题，并进行了一个客制化修改，具体样式应该也可以在右上角看到，仅供参考借鉴。</p><a id="more"></a><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="1："><a href="#1：" class="headerlink" title="1："></a>1：</h3><p>首先修改<strong>\themes\yilia\layout\_partial</strong>目录下的<strong>after-footer.ejs</strong>文件，在任意位置添加以下代码</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;script async src=<span class="hljs-string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/19.png" srcset="/img/loading.gif" alt="avatar"><br><br></p><h3 id="2："><a href="#2：" class="headerlink" title="2："></a>2：</h3><p>然后再修改<strong>\themes\yilia\layout\_partial</strong>目录下的<strong>article.ejs</strong>文件，在&lt;%- partial(‘post/title’, {class_name: ‘article-title’}) %&gt;代码下添加</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;!--显示阅读次数--&gt;<br>        &lt;% <span class="hljs-keyword">if</span> (!index &amp;&amp; post.comments)&#123; %&gt;<br>          &lt;br/&gt;<br>          &lt;a class=<span class="hljs-string">"cloud-tie-join-count"</span> href=<span class="hljs-string">"javascript:void(0);"</span> style=<span class="hljs-string">"color:gray;font-size:14px;"</span>&gt;<br>          &lt;span class=<span class="hljs-string">"icon-sort"</span> id=<span class="hljs-string">"busuanzi_container_page_pv"</span> style=<span class="hljs-string">"font-size:14px;margin-left:84.4%;"</span>&gt;<br>                    阅读总数: &lt;span id=<span class="hljs-string">"busuanzi_value_page_pv"</span> style=<span class="hljs-string">"color:#ef7522;"</span>&gt;&lt;/span&gt;次 &amp;nbsp;&amp;nbsp;<br>          &lt;/span&gt;<br>          &lt;/a&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/20.png" srcset="/img/loading.gif" alt="avatar"><br>当然也可以根据自己的审美需求修改代码的位置或者颜色等，如果有不清楚的可以与我讨论（虽然我也不太懂，是个半吊子）</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>hexo</tag>
      
      <tag>yilia</tag>
      
      <tag>不蒜子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日记-2020年1月20日</title>
    <link href="/diary/20200120.html"/>
    <url>/diary/20200120.html</url>
    
    <content type="html"><![CDATA[<p>马上就是新的一年，先祝大家在2020新的一年里新年快乐。<br><br></p><h1 id="这次的更新有："><a href="#这次的更新有：" class="headerlink" title="这次的更新有："></a>这次的更新有：<br></h1><ol><li><strong>添加网站ICO图标<br></strong></li><li><strong>利用不蒜子添加了网页阅读次数</strong><a id="more"></a>虽然更新的内容不多，但中通还是遇到了各种各样问题。<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题 "></a>遇到的问题 <br></h1></li></ol><h2 id="404问题"><a href="#404问题" class="headerlink" title="404问题"></a>404问题</h2><p>这是一个老问题了，基本每次我更新网站都会遇到。当我调试好功能，并且在本地 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 正常显示<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/15.png" srcset="/img/loading.gif" alt="img"><br>于是我将它提交到GitHub上，然后便出现了404找不到网页的错误。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/16.png" srcset="/img/loading.gif" alt="img"><br>提交是正确的，我也在GitHub上校对了仓库文件，始终无法找到是哪里错误。<br><br>解决办法也很简单，就是每次最后一次成功提交并且可访问时，将文件进行备份，当出现提交后404则还原备份，然后重新更新一次，看似没有任何实质性的解决，但每次利用备份第二次提交却都可以正常访问，这点一次困扰了我很久，希望有遇到过类似问题的人可以<a href="mailto:liuyunfz@gmail.com">与我联系</a>，不胜感激。<br><br></p><h2 id="阅读次数的显示问题"><a href="#阅读次数的显示问题" class="headerlink" title="阅读次数的显示问题"></a>阅读次数的显示问题</h2><p>为了与自身审美相适应，对网上的代码进行了更改（具体见我的添加不蒜子统计教程），但仍出现了不同分辨率设备的显示问题，这个问题也还待解决，也就先这样吧，至少在我的电脑上是正常显示的。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/17.png" srcset="/img/loading.gif" alt="img"><br><br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/18.jpg" srcset="/img/loading.gif" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生产力工具-用Python做一个headers转换</title>
    <link href="/tutorial/python-tools-transform_headers.html"/>
    <url>/tutorial/python-tools-transform_headers.html</url>
    
    <content type="html"><![CDATA[<p>每次写爬虫都要复制浏览器上的headers，而它又与python中的dict类型不符，每次都要自己一行行加引号加逗号分割。这次我们就用python识别剪辑版的headers内容来一键转换成我们要的dict类型，实现一劳永逸。</p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul><li>Python</li><li>VS Code</li><li>tkinter模块<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2>python中dict类型样式为:{<br>a:”value”,<br>b:”value”,<br>c:”value”}<br>利用python3自带的tkinter模块识别剪辑版内容，然后利用分割进行重写并加入末尾逗号，最后判断最后一行break<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> Tk<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transform</span><span class="hljs-params">(text=str)</span>:</span><br>    strlist=text.split(<span class="hljs-string">": "</span>)<br>    strheaders=<span class="hljs-string">"'&#123;0&#125;':'&#123;1&#125;'"</span>.format(strlist[<span class="hljs-number">0</span>],strlist[<span class="hljs-number">1</span>])<br>    <span class="hljs-comment">#print(strheaders)</span><br>    <span class="hljs-keyword">return</span> strheaders<br><br><br>r = Tk()<br><span class="hljs-comment"># read the clipboard</span><br>c= r.clipboard_get()<br>c_list= c.split(<span class="hljs-string">"\n"</span>)<br>headers=<span class="hljs-string">""</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> c_list:<br>    <span class="hljs-keyword">if</span> item==c_list[<span class="hljs-number">-1</span>]:<br>        headers=headers+ transform(item)<br>    <span class="hljs-keyword">else</span>:<br>        headers=headers+ transform(item)+<span class="hljs-string">",\n"</span><br>    <br>print(headers)<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为hexo博客图片添加CDN加速</title>
    <link href="/tutorial/hexo-CDN.html"/>
    <url>/tutorial/hexo-CDN.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 众所周知，<a href="https://github.com/" target="_blank" rel="noopener">Github</a>是全球最大的社交编程及代码托管网站，但是由于他是国外的产品，所以导致我们访问会比较慢，有时甚至可能出现无法访问的情况。<br><br>本博客就是部署与GitHub上的（剩下了花钱买空间以及备案等杂事），但是也因此访问速度是个很大的诟病，尤其是一些技术博客中由于图片质量导致体积较大，加载慢影响阅读。</p><a id="more"></a><br>这是为图片添加CDN之前的测速详情<br><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/9.png" srcset="/img/loading.gif" alt="avatar"><br><br></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>本次使用的是 <a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a> ，一个免费的cdn，支持npm，GitHub，wordpress。<br>操作十分简单，只需要利用他提供的网站引用自己要调用的GitHub资源即可。<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/10.png" srcset="/img/loading.gif" alt="avatar"><br>一般我hexo写md时，是将图片放到source\img目录下，然后利用</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">![img](/img/9.png)<br></code></pre></div></td></tr></table></figure><p>这样进行调用的就是我最上面的那个测速图片。<br>而我们要做的操作就是将路径地址改为网址。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">![img](https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/9.png)<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/11.png" srcset="/img/loading.gif" alt="avatar"><br>这样就实现了CDN对图片进行加速。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/12.png" srcset="/img/loading.gif" alt="avatar"><br>这就是我添加CDN后的测速结果，效果很明显，国内对博客图片访问的速度有了明显的提升。<br>如果你想要通过对站内所有网页进行加速，则可以考虑一些通用的静态或全站加速的CDN，如果你已经备案了的话可以考虑<strong>加速乐</strong>（不过不支持HTTPS），或者其他阿里云腾讯云的产品。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。（内容来自百度百科）<br><br>按照我的理解大概就是CDN服务器先提交把数据给缓存到CDN服务器那里，当你向他索取时，它就把它缓存的数据直接转送给你。举个形象点的例子，你想参加跑步比赛但是跑不过别人，你请来了小明，他帮你拿到了第一名，然后把奖牌给你了。（#大雾）<br><br>这个CDN可能是实时访问转递的，就是当你要访问数据时他才去GitHub上当下数据，然后再传过来。猜想是源于我朋友写的一个p站爬虫，由于总所周知的原因，p站无法直接进行访问，所以他在国外服务器上加了一个php，后面传递要访问的网址，然后他会自动返回那个网址的内容。相当于充当了中介桥梁。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>本期博客启发于CSDN的一篇文章：<a href="https://blog.csdn.net/qq_36759224/article/details/86936453" target="_blank" rel="noopener">免费CDN：jsDelivr+Github 使用方法</a><br><br>其实相比于用jsdelivr加速不如用七牛云储存图片外链，直接通过外链访问图片。速度应该能更快上一点，而且我印象中好像用户有免费的20G流量配额，但是手持身份证实名劝退。有兴趣的也可以自行了解一下：<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>hexo</tag>
      
      <tag>cdn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日记-2019年8月31日</title>
    <link href="/diary/20190831.html"/>
    <url>/diary/20190831.html</url>
    
    <content type="html"><![CDATA[<p>本站域名已成功由GitHub自给域名：liuyunfz.github.io 替换为 blog.6yfz.cn</p><a id="more"></a><p>在昨日，我已从华为云上购买了6年的.cn域名权限。因为cn是需要强制实名的域名，所以我于昨晚23时左右提交了实名申请。结果当我睡觉时，今日凌晨0:30分我就收到了华为云发来的右键说我已经实名认证成功。不得不赞叹华为云的处理速度。<br>目前已经能通过新域名正常访问了，更多的如HTTPS就下次再说吧。</p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【issue 已解决】关于4399造梦西游的存档保存</title>
    <link href="/issue/issue-4399-saving.html"/>
    <url>/issue/issue-4399-saving.html</url>
    
    <content type="html"><![CDATA[<div class="note note-primary"><p><strong>2019.10.05更新：issue已解决，但因为某些原因本站不提供解决方案与相关步骤</strong></p></div>  <h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我在一次偶然的尝试中抓包发现，当我点击造梦西游的保存存档按钮时，他会提交一个包，证明flash的数据也是通过发post对存档数据进行云端同步的，于是我便想通过更改提交的数据来实现修改甚至实现复制存档等操作。</p><a id="more"></a><h1 id="实战问题"><a href="#实战问题" class="headerlink" title="实战问题"></a>实战问题</h1><p>当我尝试抓包时，很明显的发现了，当提交存档时，里面有个save包，而里面的数据<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/6.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>我通过对比分析大致可以读出index是存档的位置，title是你选的职业，uid应该是4399账号的uid，refer这个在headers里也比较常见，是这个flash的直链。data我猜测应该就是存档的数据，具体分析的话我也无从下手，所以便打算试试存档复制。即把账号A的数据复制到账号B。<br><br>当我继续往下看时却发现了两个不太友好的东西，一个是token，一个是verify这两个一看就知道是验证。token有点奇怪，这边竟然是空，让我有点摸不着头脑。至于剩下的参数我这边也给出答案，gamekey相当于是这个游戏的uid，同一个游戏是固定的，所以暂时不用管，同理gameid。session:-1暂时应该也不需要我们去研究。<br><br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/7.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>在save前面有个包，根据链接我们猜测这就是获取token，结果是什么都没返回，也对应了我们之前的token是空。<br>但是到了这问题就出来了，token就算空吧，也有获取方法了，但verify完全一点头绪也没有。</p><h2 id="自发研究"><a href="#自发研究" class="headerlink" title="自发研究"></a>自发研究</h2><p>我先介绍一些我尝试并未成功的方法。</p><h3 id="从头抓包"><a href="#从头抓包" class="headerlink" title="从头抓包"></a>从头抓包</h3><p>因为我点击保存后就这么四个包，所以我在想verify会不会在前面加载网页时就获取了，所以我尝试从头开始抓包。<br><br><br>结果当然是我失败了，并没有找到一点线索，其实理性分析也知道，verify是根据存档数据（data）以及index，title等综合加密的（我有尝试过修改任何单个数据，都未成功，所以得出结论verify是根据除自身外所有数据加密计算得出的）</p><h3 id="寻找js"><a href="#寻找js" class="headerlink" title="寻找js"></a>寻找js</h3><p>我尝试在网页中寻找js，看看有没有什么方法调用来计算出verify（这边的灵感来自于酷安一位大佬分析的抓取百度指数文章）。<br><br>可能是我本身水平不够吧，或者本来就不在页面js里，所以我并未成功找到相关内容。<br>如果有人看到这可以自行尝试一下</p><h1 id="可能猜测"><a href="#可能猜测" class="headerlink" title="可能猜测"></a>可能猜测</h1><p>现在我的猜测可能就是这段verify计算是在flash内实现的（灵感来自于更早段时间我尝试抓取4399手机游戏盒登录包，里面也有一段验证和密码加密，最后我在论坛上看到了，包的数据是4399游戏盒内置的算法，需要通过逆向分析得出加密的key然后再利用base加密）。这边多提一句，4399游戏盒密码加密用到了DES加密的CBC规则，这个我也在实战中失败了，如果有懂得大佬请务必联系我。<br><br>所以现在我觉得需要实现的操作就是逆向flash得出里面的具体加密算法才能成功计算出verify。</p><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="有用的包"><a href="#有用的包" class="headerlink" title="有用的包"></a>有用的包</h2><p>抓包过程中我也收获了一些可能还算能用的上的包<br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/8.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>比如这个get_list包，好像只需要cookie，uid和gameid即可获得游戏的存档信息。<br><br>还有一个包是点击存档后，会提交一个包访问云端的数据来读取data，也还算有用</p><h2 id="其他收获"><a href="#其他收获" class="headerlink" title="其他收获"></a>其他收获</h2><p>虽然我无法实现开篇想要的复制存档功能，但是我可以通过实现反复提交来实现：回档！   这个我也有试过很多次，verify不会随时间变化，只要抓一次包就可以一劳永逸，这也更加确定了前面说的verify是根据提交数据综合来计算的。</p><h2 id="前景展望"><a href="#前景展望" class="headerlink" title="前景展望"></a>前景展望</h2><p>如果如我猜测所想是隐藏在flash中，要是在将来能逆向攻破。那么根据包里的数据gameid和gamekey可以推出，我们可以将这个方法作用于所有4399需要登录的游戏中！并且实现任意更改存档内容，实现一些理论上不会出现的情况。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>这篇文章是我用来分享我在实际操作中遇到的问题以及获得的收获。如果你对这篇文章有所看法或有解决方法，欢迎给我寄送邮件，或者联系我的WeChat。<br>当这个问题解决后，我会在博客中写出我对应的解决过程，并将此篇issue的标题改为已解决。</p>]]></content>
    
    
    <categories>
      
      <category>issue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>issue</tag>
      
      <tag>4399</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实战破解4399HASH验证</title>
    <link href="/tutorial/python-spider-4399-hash.html"/>
    <url>/tutorial/python-spider-4399-hash.html</url>
    
    <content type="html"><![CDATA[<h1 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h1><p>4399作为一个小型的游戏平台，代码安全以及复杂方面远不及BAT等大型公司来的难。因此被我当作爬虫的热身网站。我曾把4399的登录包，注册包，以及一大推的获取个人信息包都写了。然后是要实战一些模拟操作了。<br><br><br>而当我转向尝试去模拟4399群组中关注他人时，却被恶心到了，除了常规的验证码，提交的包中还多了一个HASH参数。略懂电脑基础知识对的应该都不陌生，虽然可能不是传统意义上的hash，但必然是一串验证代码。<br><br>而这次我们就来实战攻破4399的HASH验证。</p><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><blockquote><p><strong>Python[模块：json,requests,matplotlib,execjs]</strong><br><strong>Chrome<br>VS Code</strong></p></blockquote><h1 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h1><p>我们先尝试用浏览器进行抓包分析。<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/1.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>可以看到当我们点击关注时，系统会发送一个关注包，这时他会自动判断（玄学）是否需要输入验证码。如果需要则会再发送两个包，一个是图中的geturl?type=zone<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/2.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>可以看到，这个包的作用是获得验证码的地址。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">def geturl(cookie):<br>    get_headers=&#123;<br>    <span class="hljs-string">'Accept'</span>: <span class="hljs-string">'application/json, text/javascript, */*; q=0.01'</span>,<br>    <span class="hljs-string">'Accept-Encoding'</span>: <span class="hljs-string">'gzip, deflate'</span>,<br>    <span class="hljs-string">'Accept-Language'</span>: <span class="hljs-string">'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7'</span>,<br>    <span class="hljs-string">'Connection'</span>: <span class="hljs-string">'keep-alive'</span>,<br>    <span class="hljs-string">'Cookie'</span>: cookie,<br>    <span class="hljs-string">'Host'</span>: <span class="hljs-string">'my.4399.com'</span>,<br>    <span class="hljs-string">'Referer'</span>: <span class="hljs-string">'http://my.4399.com/u/2576802349'</span>,<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span>,<br>    <span class="hljs-string">'X-Requested-With'</span>: <span class="hljs-string">'XMLHttpRequest'</span><br>    &#125;<br>    rsp = requests.get(url=<span class="hljs-string">"http://my.4399.com/plugins/captcha/index-getUrl?type=zone"</span>,headers=get_headers)    <br>    url=json.loads(rsp.text)<br>    url = url[<span class="hljs-string">"result"</span>][<span class="hljs-string">"url"</span>]<br>    <span class="hljs-built_in">return</span> url<br></code></pre></div></td></tr></table></figure><p>根据这个包返回的格式我们判断出是json文件，所以利用json模块进行转换，然后按照格式取出包含在其中的URL。<br><br><br>这个时候我们还无法看出HASH的具体作用，我们输入验证码继续看看提交了什么<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/3.jpg" srcset="/img/loading.gif" alt="avatar"><br><br>可以看到，当我们提交了验证码，后面多了一个index-check的包，大概能猜出是验证码验证进行check。其中三个参数，type：zone.cap就是验证码了，hash就是我们这篇要解决的内容了。<br><br>我们知道了用处，回去看下之前那个GET-HASH包<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/3.png" srcset="/img/loading.gif" alt="avatar"><br><br>返回的是一堆json代码，我们尝试在命令提示符运行，可以看到，完美符合提交的HASH值。<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/4.png" srcset="/img/loading.gif" alt="avatar"><br><br>接下来的难点就是如何通过这个包返回的代码，利用python计算出hash，如果直接是json代码运行还可以，但是我们仔细观察可以看出，在返回的代码中，最后一句的大致意思是给网页中ID为cap_hash的对象赋值hash，但是在python中，我们并不会有相关的对象，所以我们得想办法取出我们想要的代码。<br>我首先想到的是读取行</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">listd=rsp.text.split(<span class="hljs-string">"\n"</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> listd:<br>        <span class="hljs-built_in">print</span>(i,<span class="hljs-string">"\n"</span>,<span class="hljs-string">"————————————————————————————————————————————————————————"</span>)<br></code></pre></div></td></tr></table></figure><p>返回的就有点奇怪</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">var _4ba4cacd070fe=/*8/<span class="hljs-string">"e0*//*+f c62'c6-*/'_aa6b9'/*3=b8d'*/+/*5'5 3*/'69b11784ed'/*9"</span>b/;*/+/*,-5=4/;+_*/<span class="hljs-string">'a4f581c4'</span>/*;==,<span class="hljs-string">"18*/+/*/'+++9/9-*/'af15edcd1'/*a 48;4,,9*/+ </span><br><span class="hljs-string"> ————————————————————————————————————————————————————————</span><br><span class="hljs-string">        ''/*8f3c2+2;61*/;var _1eff743fb70c3ef68=/*3+=1+/- 5*/''/*;4ead70"</span>*/;var _f98ed25c1ead835f23e9fa=decodeURIComponent(/*<span class="hljs-string">"4ce8*//*f"</span>+9-,d1c8*/<span class="hljs-string">'%29%00'</span>/*=5--5_6+e8*/+/*f9c0=*/<span class="hljs-string">'%13%16%3'</span>/*<span class="hljs-string">'+d"c2 d*/+/*46 50*/'</span>D%5DU%0CW<span class="hljs-string">'/*/1f7db*/+/*4/d1"9c/d*/'</span>%00%00<span class="hljs-string">'/*'</span>3+<span class="hljs-string">'d54*/+/*c 854*/'</span>R%5BW<span class="hljs-string">'/*9-/b+3*/+/*87-9_;*/'</span>T%05Y%00W<span class="hljs-string">'/*c"'</span>00*/+/*--a;2*/<span class="hljs-string">'%04%0D'</span>/*4ce44_*/+/*a,b94_0_-*/<span class="hljs-string">'RZ%0C%0'</span>/*2_3e+b57f*/+/*_<span class="hljs-string">'__"c-/*/'</span>5%05%0<span class="hljs-string">'/*04+a6 b2,*/+/*=+=42*/'</span>7Q%5DSP<span class="hljs-string">'/*9474e*/+/*'</span>ee5c<span class="hljs-string">'/ad*/'</span>T%06jT%0<span class="hljs-string">'/*a2,";"b 2*/+/*f_- _1d/ef*/'</span>7S__CW%<span class="hljs-string">'/*5b,e6*/+/*638fd*/'</span>01EXXV<span class="hljs-string">'/*5f,+/67-*/+/*946f33*/'</span>%1CL%1F%<span class="hljs-string">'/*f5/9;868f*/+/*;9_;+4-*/'</span>17U%14<span class="hljs-string">'/*-42b210'</span>-*/+/*20<span class="hljs-string">";+*/'%15gRZ%01X'/*3_,a8*/+/*aeb0-*/'VP%03VQ%0'/*,ad39"</span>*/+/* ,01f_2/1<span class="hljs-string">'*/'</span>1%02%01%3<span class="hljs-string">'/*/2590/3a*/+/*5'</span>=57ff,b1*/<span class="hljs-string">'EV%05%0'</span>/*<span class="hljs-string">"208=3/*/+/*0=599/"</span><span class="hljs-string">'*/'</span>2R%0FS%0<span class="hljs-string">'/*79_-1",*/+/*==='</span>9=<span class="hljs-string">'0;e*/'</span>0_%16%16<span class="hljs-string">'/*;7/-3*/+/*=b61;a8-5*/'</span>%0CgW%5CQ<span class="hljs-string">'/*,5b/f554*/+/*90",a7*/'</span>X%04%07<span class="hljs-string">'/*e2/03076*/+/*92/ae-*/'</span>%03%0B%04%<span class="hljs-string">'/*69+0/__2_6*/+/*'</span> fd25_*/<span class="hljs-string">'01RQ%07'</span>/*34a3e,<span class="hljs-string">"*/+/*4-f3251c*/'%06QQTU%01'/*9ec"</span>9 0*/+/*2 8f/f*/<span class="hljs-string">'%08t%'</span>/*d+ 5fef7=*/+/*3c6c3*/<span class="hljs-string">'5CF%07W%0'</span>/*d;92d*/+/*;=4db<span class="hljs-string">'0*/'</span>F%11%<span class="hljs-string">'/*a"182+-de*/+/*5ce 6,,c0*/'</span>02%3DR%0<span class="hljs-string">'/*1=9a7=*/+/*1/;9//255b*/'</span>8%02%01%04<span class="hljs-string">'/*_0+=a/*/+/*a6257+09*/'</span>%04RR%01<span class="hljs-string">'/*5/ 9-*/+/*2,2-;f2*/'</span>%04S%<span class="hljs-string">'/*3,'</span>377*/+/*6<span class="hljs-string">"=6"</span>b*/<span class="hljs-string">'08PTPUV%0'</span>/*929a3d1/*/+/* 1a5cb*/<span class="hljs-string">'7P%5C'</span>/*7a<span class="hljs-string">'0"b*/+/*,_3173+/_*/'</span>O%5EC%0<span class="hljs-string">'/*b846+"96,"*/+/*;c4-23*/'</span>7jWP%0<span class="hljs-string">'/*d8'</span>,99-8a*/+/*8<span class="hljs-string">"='8bb'5,*/'2Z%0A'/*6170/8b,9_*/+/*_be658_*/'%11%02%3D'/*699=-=e*/+/*27f9809*/'R%08%02'/* d97+6105;*/+/*9+36/4+c7*/'%01%04'/*81+"</span>2*/+/*,1; c7=c*/<span class="hljs-string">'%04RR%01'</span>/*6 3,+4;1*/+/*7fd d/d<span class="hljs-string">'b0*/'</span>%04S%<span class="hljs-string">'/*1;0571_*/+/*'</span>a5<span class="hljs-string">'+_+- ,*/'</span>08PTPUV<span class="hljs-string">'/*ab-5e=e*/+/*"5fe e802*/'</span>%07P%5C<span class="hljs-string">'/*e6a2,d*/+/*=+_;ed-*/'</span>O%5ECMfPF<span class="hljs-string">'/*41=b"5*/+/*=24b1'</span>=a*/<span class="hljs-string">'%0D%3'</span>/*70d_9c*/+/*,;_b0;5a*/<span class="hljs-string">'DZ%0F'</span>/*33967*/+/*5+3; */<span class="hljs-string">'%0C%5B%01P'</span>/*,93352f*/+/*4 ,<span class="hljs-string">'0*/'</span>%01%0<span class="hljs-string">'/*+;3+_8+*/+/*5+;0,/ 9ec*/'</span>B%01%07<span class="hljs-string">'/*+ c; */+/*/b;3_6c,*/'</span>%02QUQQ%0C<span class="hljs-string">'/*'</span>b1f54*/+/* 0 2;*/<span class="hljs-string">'%01UQX'</span>/*2ad=3f-*/+/*_ 5240f*/<span class="hljs-string">'M%0C%12P%'</span>/*;4f2d91*/+/*2_d<span class="hljs-string">'8;4*/'</span>05D_n%3CXT<span class="hljs-string">'/*f2d3"*/+/*,38/66cb*/'</span>%0FRX%00%<span class="hljs-string">'/* 3;;_*/+/*;67"6'</span>_1*/<span class="hljs-string">'0AWSW%0'</span>/*a_13_94<span class="hljs-string">'a*/+/*772a_9,*/'</span>7Y%03%<span class="hljs-string">'/*+c+6f6;d-*/+/*d;13a1e66+*/'</span>01PQ%02%0<span class="hljs-string">'/*a+5611*/+/*-"7b2*/'</span>3%0C%13%<span class="hljs-string">'/*86cc"=-*/+/*4f"a'</span>f*/<span class="hljs-string">'0CDQ%'</span>/*ba6b3+;*/+/*bef5<span class="hljs-string">'61*/'</span>04A%0Aj%<span class="hljs-string">'/*6;'</span><span class="hljs-string">"6"</span>a<span class="hljs-string">"/*/+/*3+_f4'6*/'06%5D'/*094/5fc52;*/+/*e"</span>d2b9+97*/<span class="hljs-string">'V%5D%0'</span>/*d064b<span class="hljs-string">"b7eb*/+/*8f3=ae;8*/'1%3EWR%0'/*+=-'4*/+/*_7383a*/'3%00_%06X'/*34;"</span>3,6;8*/+/*44c bca ea*/<span class="hljs-string">'UU%05%07%0'</span>/*+0c5,*/+/*e0d880_3f*/<span class="hljs-string">'EQ%5CO%5C%'</span>/*f0,,f aa9*/+/*a+9a<span class="hljs-string">";,*/'13S%02YWU'/*e6-3,36e"</span>*/+/*0e428,, <span class="hljs-string">"8*/'%05%03S'/*d /119-e'*/+/*3;/d-40c2-*/'%16%0E%3'/*f87/;24b,*/+/*'e bfb,*/'A%07Z'/*/_554*/+/*c6+=588-c_*/'Q%08o%00W'/*=fecc*/+/*ce 3"</span>ce*/<span class="hljs-string">'%05W%5'</span>/*ad1_<span class="hljs-string">"505*/+/*,+a-d*/'BP%09%03'/*6 ee7,;/*/+/*=5-7a0a*/'%06U%03'/*e9df5c*/+/*d=6 1*/'%08%02%'/*cd'915,/31*/+/*'f7b/,d*/'00%5DJ%'/*,3/6d*/+/*4-6b0"</span>6c11*/<span class="hljs-string">'09A%03'</span>/*b9f001*/+/*1,549=5cf */<span class="hljs-string">'%5E%04S%'</span>/*84a6f; */+/*1<span class="hljs-string">'6"/-,"*/'</span>00XVW%07SC<span class="hljs-string">'/*3_9'</span>7<span class="hljs-string">"b 8*/+/*8;_45/0;"</span>9*/<span class="hljs-string">'X%16T'</span>/*1030a/ _ce*/+/*228,ac*/<span class="hljs-string">'%2B%14%13'</span>/*18;_6*/+/*657; ++3<span class="hljs-string">"*/'XBfU%00W%0'/*a+0f  f_9*/+/*7;26,*/'8%01V%0E%0'/*280/09a//*/+/*'aa7 _*/'7P%06'/*/2cc9*/+/*3 b5_*/'%07%0'/*_b9 ==*/+/*4ca/df+*/'4%07%02%'/*_-0/630*/+/*4= ''9d2b-*/'5C%05'/*'d=_3d7b"</span>*/+/*-f<span class="hljs-string">"37cd9*/'S%02%04'/*/=3=de603*/+/*;,5a3*/'_%0AH%5E'/*2f6+'0b3*/+</span><br><span class="hljs-string"> ————————————————————————————————————————————————————————</span><br><span class="hljs-string">        ''/*eb -1bd1"</span>*/);<br> ————————————————————————————————————————————————————————<br><span class="hljs-keyword">for</span>(i=0; i&lt;_f98ed25c1ead835f23e9fa.length;i++)<br> ————————————————————————————————————————————————————————<br>_1eff743fb70c3ef68 += String.fromCharCode(_4ba4cacd070fe.charCodeAt(i%_4ba4cacd070fe.length)^_f98ed25c1ead835f23e9fa.charCodeAt(i));<br> ————————————————————————————————————————————————————————<br><span class="hljs-built_in">eval</span>(_1eff743fb70c3ef68);<br> ————————————————————————————————————————————————————————<br>document.getElementById(<span class="hljs-string">'cap_hash'</span>).value=_dc5511ecc1a84115c98dc6d8730755fe();<br> ————————————————————————————————————————————————————————<br></code></pre></div></td></tr></table></figure><p>当我们多尝试几次后，会发现返回的代码是固定七行，只有第七行是我们需要进行修改的，所以我们将前六行写入一个新的字符串中</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> listd[0:6]:<br>        hashcode_str = hashcode_str + i + <span class="hljs-string">"\n"</span><br></code></pre></div></td></tr></table></figure><p>这边的listd好像有点类似range，也是左闭右开，所以只能取出前6行。<br>然后把这个字符串用execjs的模块转换一下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">a = execjs.compile(hashcode_str)<br></code></pre></div></td></tr></table></figure><p>第七行其实我们只需要用到后面的方法调用，前面的赋值语句是不需要的。观察分析其实前面赋值对象的语句应该是固定的，所以我们可以直接通过长度来进行取值，我用鼠标一个个字符串数过去的，我们要的刚好是第42个字符开始，即“_”，后面则是一串随机的字母数字，我们取到底就好。<br>这边还有一个我在运行时遇到的问题，execjs调用命令后，好像结尾并不能加”:”,否则会报错，所以应该是</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">a.eval(listd[6][42:-1])<br></code></pre></div></td></tr></table></figure><p>总的获取hash代码就是</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">def gethash(cookie):<br>    headers = &#123;<br>    <span class="hljs-string">"User-Agent"</span>: <span class="hljs-string">"Mozilla/5.0 (Windows NT 5.1; U; zh-cn; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 Opera 10.70"</span>,<br>    <span class="hljs-string">"Cookie"</span>:cookie<br>    &#125;                        <br>    url = <span class="hljs-string">"http://my.4399.com/plugins/captcha/index-getHash?_=1565359334744"</span><br>    rsp = requests.get(url,headers=headers)<br>    rsp.encoding =<span class="hljs-string">"utf-8"</span><br>    hashcode_str = <span class="hljs-string">""</span><br>    listd=rsp.text.split(<span class="hljs-string">"\n"</span>)<br>    sum=0<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> listd[0:6]:<br>        hashcode_str = hashcode_str + i + <span class="hljs-string">"\n"</span><br>        sum+=1<br>    <span class="hljs-built_in">print</span>(sum)<br>    <span class="hljs-built_in">print</span>(len(listd))<br>    a = execjs.compile(hashcode_str)<br>    <span class="hljs-built_in">return</span> a.eval(listd[6][42:-1])<br></code></pre></div></td></tr></table></figure><p>然后我们就可以完成这次要实现的关注模拟了<br><br><img src="https://cdn.jsdelivr.net/gh/liuyunfz/liuyunfz.github.io/img/5.jpg" srcset="/img/loading.gif" alt="avatar"><br></p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>python</tag>
      
      <tag>4399</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/diary/hello-world.html"/>
    <url>/diary/hello-world.html</url>
    
    <content type="html"><![CDATA[<p>This is my first blog.<br>Then I will tell you something about this blog.<br>please press ‘MORE’ boutton</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本博客基于hexo，主题使用的是<del><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a></del><a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="noopener">fluid</a><br><br>博客暂时通过GitHub与coding进行运行，在将来有经济收入后可能会考虑自购空间进行转移。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>欢迎来到我的博客，在这里我会分享一些我在编程时遇到的问题，以就解决的步骤，并总结下心得。如果能对来到这的你有所帮助，我会不胜喜悦。<br>部分我觉得可能会有用的代码文件我也会开源在我的GitHub账号上。</p><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>如果您在阅读途中发现我的博客中有所错误，请及时通过<del>左边</del>右上角的<strong>关于</strong>与我进行交流。</p>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
